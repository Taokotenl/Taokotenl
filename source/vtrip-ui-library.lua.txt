--[[
    VTriP UI Library
    Created by VTriP Official
    
    A customizable UI library for Roblox exploits
    Mobile & PC Compatible
]]

local VTripLibrary = {}
local UIs = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Default settings
local defaultSettings = {
    title = "VTriP Menu",
    subtitle = "Premium Edition",
    theme = {
        background = Color3.fromRGB(30, 25, 40),
        foreground = Color3.fromRGB(40, 35, 55),
        accent = Color3.fromRGB(150, 120, 200),
        text = Color3.fromRGB(255, 255, 255),
        subtext = Color3.fromRGB(180, 180, 180)
    },
    size = UDim2.new(0, 400, 0, 350),
    position = UDim2.new(0.5, -200, 0.5, -175),
    toggleKey = Enum.KeyCode.M
}

-- Create a new UI
function VTripLibrary.new(settings)
    settings = settings or {}
    
    -- Merge with default settings
    for key, value in pairs(defaultSettings) do
        if settings[key] == nil then
            settings[key] = value
        elseif key == "theme" and type(settings[key]) == "table" then
            for themeKey, themeValue in pairs(defaultSettings[key]) do
                if settings[key][themeKey] == nil then
                    settings[key][themeKey] = themeValue
                end
            end
        end
    end
    
    -- Create UI instance
    local UI = {}
    UI.settings = settings
    UI.tabs = {}
    UI.selectedTab = 1
    UI.elements = {}
    
    -- Create the main GUI
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VTripMenu_" .. #UIs + 1
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = game.CoreGui
    UI.screenGui = screenGui
    
    -- Create open button (initially hidden)
    local openButton = Instance.new("TextButton")
    openButton.Name = "OpenButton"
    openButton.Size = UDim2.new(0, 120, 0, 40)
    openButton.Position = UDim2.new(0.5, -60, 0, 10)
    openButton.BackgroundColor3 = settings.theme.accent
    openButton.BackgroundTransparency = 0.2
    openButton.Text = "Open " .. settings.title
    openButton.TextColor3 = settings.theme.text
    openButton.TextSize = 16
    openButton.Font = Enum.Font.GothamBold
    openButton.Visible = false
    openButton.Parent = screenGui
    UI.openButton = openButton
    
    local openButtonCorner = Instance.new("UICorner")
    openButtonCorner.CornerRadius = UDim.new(0, 8)
    openButtonCorner.Parent = openButton
    
    -- Main frame settings
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = settings.size
    mainFrame.Position = settings.position
    mainFrame.BackgroundColor3 = settings.theme.background
    mainFrame.BackgroundTransparency = 0.2
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    UI.mainFrame = mainFrame
    
    -- Add rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 10)
    uiCorner.Parent = mainFrame
    
    -- Add title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, -40, 0, 25)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = settings.title
    titleLabel.TextColor3 = settings.theme.text
    titleLabel.TextSize = 18
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = mainFrame
    UI.titleLabel = titleLabel
    
    -- Add subtitle
    local subtitleLabel = Instance.new("TextLabel")
    subtitleLabel.Name = "SubtitleLabel"
    subtitleLabel.Size = UDim2.new(1, -40, 0, 20)
    subtitleLabel.Position = UDim2.new(0, 10, 0, 25)
    subtitleLabel.BackgroundTransparency = 1
    subtitleLabel.Text = settings.subtitle
    subtitleLabel.TextColor3 = settings.theme.subtext
    subtitleLabel.TextSize = 14
    subtitleLabel.Font = Enum.Font.Gotham
    subtitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    subtitleLabel.Parent = mainFrame
    UI.subtitleLabel = subtitleLabel
    
    -- Add close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0, 5)
    closeButton.BackgroundColor3 = settings.theme.accent
    closeButton.BackgroundTransparency = 0.2
    closeButton.Text = "X"
    closeButton.TextColor3 = settings.theme.text
    closeButton.TextSize = 16
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = mainFrame
    UI.closeButton = closeButton
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 5)
    closeCorner.Parent = closeButton
    
    -- Create tabs container
    local tabsFrame = Instance.new("Frame")
    tabsFrame.Name = "TabsFrame"
    tabsFrame.Size = UDim2.new(1, -20, 0, 30)
    tabsFrame.Position = UDim2.new(0, 10, 0, 50)
    tabsFrame.BackgroundColor3 = settings.theme.foreground
    tabsFrame.BackgroundTransparency = 0.3
    tabsFrame.BorderSizePixel = 0
    tabsFrame.Parent = mainFrame
    UI.tabsFrame = tabsFrame
    
    local tabsCorner = Instance.new("UICorner")
    tabsCorner.CornerRadius = UDim.new(0, 5)
    tabsCorner.Parent = tabsFrame
    
    -- Create content frame for tab content
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "ContentFrame"
    contentFrame.Size = UDim2.new(1, -20, 1, -90)
    contentFrame.Position = UDim2.new(0, 10, 0, 90)
    contentFrame.BackgroundColor3 = settings.theme.foreground
    contentFrame.BackgroundTransparency = 0.3
    contentFrame.BorderSizePixel = 0
    contentFrame.Parent = mainFrame
    UI.contentFrame = contentFrame
    
    local contentCorner = Instance.new("UICorner")
    contentCorner.CornerRadius = UDim.new(0, 8)
    contentCorner.Parent = contentFrame
    
    -- Add drag functionality
    local isDragging = false
    local dragStart = nil
    local startPos = nil
    
    titleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)
    
    subtitleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X, 
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = false
        end
    end)
    
    -- Close button functionality (hide menu and show open button)
    closeButton.MouseButton1Click:Connect(function()
        mainFrame.Visible = false
        openButton.Visible = true
    end)
    
    -- Open button functionality
    openButton.MouseButton1Click:Connect(function()
        mainFrame.Visible = true
        openButton.Visible = false
    end)
    
    -- Toggle menu visibility with a key (for PC users)
    local toggleKey = settings.toggleKey
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == toggleKey then
            mainFrame.Visible = not mainFrame.Visible
            openButton.Visible = not mainFrame.Visible
        end
    end)
    
    -- Add a subtle animation when the menu opens
    mainFrame.Size = UDim2.new(0, 0, 0, 0)
    mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    mainFrame.BackgroundTransparency = 1
    
    local openTween = TweenService:Create(
        mainFrame, 
        TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), 
        {
            Size = settings.size,
            Position = settings.position,
            BackgroundTransparency = 0.2
        }
    )
    openTween:Play()
    
    -- Add tab functionality
    function UI:AddTab(name, color)
        color = color or settings.theme.accent
        
        local tabIndex = #self.tabs + 1
        local tab = {
            name = name,
            color = color,
            elements = {}
        }
        
        -- Create tab button
        local tabButton = Instance.new("TextButton")
        tabButton.Name = "Tab" .. tabIndex
        tabButton.Size = UDim2.new(1/#self.tabs + 1, -5, 1, -6)
        tabButton.BackgroundColor3 = color
        tabButton.BackgroundTransparency = 0.7
        tabButton.Text = name
        tabButton.TextColor3 = settings.theme.text
        tabButton.TextSize = 14
        tabButton.Font = Enum.Font.GothamSemibold
        tabButton.Parent = self.tabsFrame
        tab.button = tabButton
        
        local tabButtonCorner = Instance.new("UICorner")
        tabButtonCorner.CornerRadius = UDim.new(0, 5)
        tabButtonCorner.Parent = tabButton
        
        -- Create content page for this tab
        local tabPage = Instance.new("ScrollingFrame")
        tabPage.Name = "Page" .. tabIndex
        tabPage.Size = UDim2.new(1, -10, 1, -10)
        tabPage.Position = UDim2.new(0, 5, 0, 5)
        tabPage.BackgroundTransparency = 1
        tabPage.BorderSizePixel = 0
        tabPage.ScrollBarThickness = 4
        tabPage.ScrollBarImageColor3 = settings.theme.accent
        tabPage.Visible = tabIndex == 1 -- Only first tab visible by default
        tabPage.Parent = self.contentFrame
        tab.page = tabPage
        
        -- Add padding to the content
        local padding = Instance.new("UIPadding")
        padding.PaddingLeft = UDim.new(0, 10)
        padding.PaddingRight = UDim.new(0, 10)
        padding.PaddingTop = UDim.new(0, 10)
        padding.PaddingBottom = UDim.new(0, 10)
        padding.Parent = tabPage
        
        -- Add layout for content
        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 10)
        layout.SortOrder = Enum.SortOrder.LayoutOrder
        layout.Parent = tabPage
        tab.layout = layout
        
        -- Tab button click handler
        tabButton.MouseButton1Click:Connect(function()
            -- Hide all pages
            for _, otherTab in ipairs(self.tabs) do
                otherTab.page.Visible = false
                otherTab.button.BackgroundTransparency = 0.7
            end
            
            -- Show selected page
            tabPage.Visible = true
            tabButton.BackgroundTransparency = 0.3
            self.selectedTab = tabIndex
        end)
        
        -- Auto-size the scrolling frame
        layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabPage.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 20)
        end)
        
        -- Update tab button positions
        self:UpdateTabButtons()
        
        -- Add tab to tabs table
        table.insert(self.tabs, tab)
        
        -- Set as selected if it's the first tab
        if tabIndex == 1 then
            tabButton.BackgroundTransparency = 0.3
        end
        
        return tab
    end
    
    -- Update tab button positions
    function UI:UpdateTabButtons()
        for i, tab in ipairs(self.tabs) do
            tab.button.Size = UDim2.new(1/#self.tabs, -5, 1, -6)
            tab.button.Position = UDim2.new((i-1)/#self.tabs, 3, 0, 3)
        end
    end
    
    -- Add elements to tabs
    function UI:AddSection(tabIndex, text)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        local sectionFrame = Instance.new("Frame")
        sectionFrame.Size = UDim2.new(1, 0, 0, 30)
        sectionFrame.BackgroundTransparency = 1
        sectionFrame.Parent = tab.page
        
        local sectionLabel = Instance.new("TextLabel")
        sectionLabel.Size = UDim2.new(1, 0, 1, 0)
        sectionLabel.BackgroundTransparency = 1
        sectionLabel.Text = text
        sectionLabel.TextColor3 = settings.theme.accent
        sectionLabel.TextSize = 16
        sectionLabel.Font = Enum.Font.GothamBold
        sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
        sectionLabel.Parent = sectionFrame
        
        local sectionLine = Instance.new("Frame")
        sectionLine.Size = UDim2.new(1, 0, 0, 1)
        sectionLine.Position = UDim2.new(0, 0, 1, 0)
        sectionLine.BackgroundColor3 = settings.theme.accent
        sectionLine.BorderSizePixel = 0
        sectionLine.Parent = sectionFrame
        
        return sectionFrame
    end
    
    function UI:AddToggle(tabIndex, text, default)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        local toggleFrame = Instance.new("Frame")
        toggleFrame.Size = UDim2.new(1, 0, 0, 40)
        toggleFrame.BackgroundTransparency = 1
        toggleFrame.Parent = tab.page
        
        local toggleLabel = Instance.new("TextLabel")
        toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
        toggleLabel.Position = UDim2.new(0, 0, 0, 0)
        toggleLabel.BackgroundTransparency = 1
        toggleLabel.Text = text
        toggleLabel.TextColor3 = settings.theme.text
        toggleLabel.TextSize = 14
        toggleLabel.Font = Enum.Font.Gotham
        toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
        toggleLabel.Parent = toggleFrame
        
        local toggleButton = Instance.new("TextButton")
        toggleButton.Size = UDim2.new(0, 40, 0, 24)
        toggleButton.Position = UDim2.new(0.85, 0, 0.5, -12)
        toggleButton.BackgroundColor3 = default and Color3.fromRGB(100, 200, 100) or Color3.fromRGB(200, 100, 100)
        toggleButton.BorderSizePixel = 0
        toggleButton.Text = ""
        toggleButton.Parent = toggleFrame
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 12)
        toggleCorner.Parent = toggleButton
        
        local toggleCircle = Instance.new("Frame")
        toggleCircle.Size = UDim2.new(0, 18, 0, 18)
        toggleCircle.Position = default and UDim2.new(0.55, 0, 0.5, -9) or UDim2.new(0.05, 0, 0.5, -9)
        toggleCircle.BackgroundColor3 = settings.theme.text
        toggleCircle.BorderSizePixel = 0
        toggleCircle.Parent = toggleButton
        
        local toggleCircleCorner = Instance.new("UICorner")
        toggleCircleCorner.CornerRadius = UDim.new(0, 9)
        toggleCircleCorner.Parent = toggleCircle
        
        local toggled = default
        
        toggleButton.MouseButton1Click:Connect(function()
            toggled = not toggled
            
            local targetPosition = toggled and UDim2.new(0.55, 0, 0.5, -9) or UDim2.new(0.05, 0, 0.5, -9)
            local targetColor = toggled and Color3.fromRGB(100, 200, 100) or Color3.fromRGB(200, 100, 100)
            
            TweenService:Create(toggleCircle, TweenInfo.new(0.2), {Position = targetPosition}):Play()
            TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = targetColor}):Play()
        end)
        
        local toggle = {
            instance = toggleFrame,
            value = function() return toggled end,
            set = function(value)
                toggled = value
                local targetPosition = toggled and UDim2.new(0.55, 0, 0.5, -9) or UDim2.new(0.05, 0, 0.5, -9)
                local targetColor = toggled and Color3.fromRGB(100, 200, 100) or Color3.fromRGB(200, 100, 100)
                
                toggleCircle.Position = targetPosition
                toggleButton.BackgroundColor3 = targetColor
            end
        }
        
        return toggle
    end
    
    function UI:AddSlider(tabIndex, text, min, max, default)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        local sliderFrame = Instance.new("Frame")
        sliderFrame.Size = UDim2.new(1, 0, 0, 60)
        sliderFrame.BackgroundTransparency = 1
        sliderFrame.Parent = tab.page
        
        local sliderLabel = Instance.new("TextLabel")
        sliderLabel.Size = UDim2.new(0.6, 0, 0, 20)
        sliderLabel.Position = UDim2.new(0, 0, 0, 0)
        sliderLabel.BackgroundTransparency = 1
        sliderLabel.Text = text
        sliderLabel.TextColor3 = settings.theme.text
        sliderLabel.TextSize = 14
        sliderLabel.Font = Enum.Font.Gotham
        sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
        sliderLabel.Parent = sliderFrame
        
        local valueLabel = Instance.new("TextLabel")
        valueLabel.Size = UDim2.new(0.2, 0, 0, 20)
        valueLabel.Position = UDim2.new(0.8, 0, 0, 0)
        valueLabel.BackgroundTransparency = 1
        valueLabel.Text = tostring(default)
        valueLabel.TextColor3 = settings.theme.text
        valueLabel.TextSize = 14
        valueLabel.Font = Enum.Font.Gotham
        valueLabel.TextXAlignment = Enum.TextXAlignment.Right
        valueLabel.Parent = sliderFrame
        
        local sliderBg = Instance.new("Frame")
        sliderBg.Size = UDim2.new(1, 0, 0, 10)
        sliderBg.Position = UDim2.new(0, 0, 0.5, 5)
        sliderBg.BackgroundColor3 = settings.theme.background
        sliderBg.BorderSizePixel = 0
        sliderBg.Parent = sliderFrame
        
        local sliderBgCorner = Instance.new("UICorner")
        sliderBgCorner.CornerRadius = UDim.new(0, 5)
        sliderBgCorner.Parent = sliderBg
        
        local sliderFill = Instance.new("Frame")
        sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        sliderFill.BackgroundColor3 = settings.theme.accent
        sliderFill.BorderSizePixel = 0
        sliderFill.Parent = sliderBg
        
        local sliderFillCorner = Instance.new("UICorner")
        sliderFillCorner.CornerRadius = UDim.new(0, 5)
        sliderFillCorner.Parent = sliderFill
        
        local sliderButton = Instance.new("TextButton")
        sliderButton.Size = UDim2.new(0, 20, 0, 20)
        sliderButton.Position = UDim2.new((default - min) / (max - min), -10, 0.5, -5)
        sliderButton.BackgroundColor3 = settings.theme.accent
        sliderButton.BorderSizePixel = 0
        sliderButton.Text = ""
        sliderButton.Parent = sliderBg
        
        local sliderButtonCorner = Instance.new("UICorner")
        sliderButtonCorner.CornerRadius = UDim.new(0, 10)
        sliderButtonCorner.Parent = sliderButton
        
        local value = default
        local dragging = false
        
        local function updateSlider(input)
            local relativePos = math.clamp((input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X, 0, 1)
            value = min + (max - min) * relativePos
            value = math.floor(value * 10) / 10 -- Round to 1 decimal place
            
            sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
            sliderButton.Position = UDim2.new(relativePos, -10, 0.5, -5)
            valueLabel.Text = tostring(value)
        end
        
        sliderButton.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
            end
        end)
        
        sliderBg.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                updateSlider(input)
                dragging = true
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                updateSlider(input)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)
        
        local slider = {
            instance = sliderFrame,
            value = function() return value end,
            set = function(newValue)
                value = math.clamp(newValue, min, max)
                local relativePos = (value - min) / (max - min)
                sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
                sliderButton.Position = UDim2.new(relativePos, -10, 0.5, -5)
                valueLabel.Text = tostring(value)
            end
        }
        
        return slider
    end
    
    function UI:AddDropdown(tabIndex, text, options, default)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        local dropdownFrame = Instance.new("Frame")
        dropdownFrame.Size = UDim2.new(1, 0, 0, 40)
        dropdownFrame.BackgroundTransparency = 1
        dropdownFrame.Parent = tab.page
        
        local dropdownLabel = Instance.new("TextLabel")
        dropdownLabel.Size = UDim2.new(0.4, 0, 1, 0)
        dropdownLabel.Position = UDim2.new(0, 0, 0, 0)
        dropdownLabel.BackgroundTransparency = 1
        dropdownLabel.Text = text
        dropdownLabel.TextColor3 = settings.theme.text
        dropdownLabel.TextSize = 14
        dropdownLabel.Font = Enum.Font.Gotham
        dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
        dropdownLabel.Parent = dropdownFrame
        
        local dropdownButton = Instance.new("TextButton")
        dropdownButton.Size = UDim2.new(0.6, -10, 0, 30)
        dropdownButton.Position = UDim2.new(0.4, 5, 0.5, -15)
        dropdownButton.BackgroundColor3 = settings.theme.background
        dropdownButton.BorderSizePixel = 0
        dropdownButton.Text = default or options[1]
        dropdownButton.TextColor3 = settings.theme.text
        dropdownButton.TextSize = 14
        dropdownButton.Font = Enum.Font.Gotham
        dropdownButton.Parent = dropdownFrame
        
        local dropdownButtonCorner = Instance.new("UICorner")
        dropdownButtonCorner.CornerRadius = UDim.new(0, 5)
        dropdownButtonCorner.Parent = dropdownButton
        
        -- Create dropdown list directly in ScreenGui to avoid being clipped
        local dropdownList = Instance.new("Frame")
        dropdownList.Size = UDim2.new(0.6, -10, 0, #options * 30)
        dropdownList.BackgroundColor3 = settings.theme.background
        dropdownList.BorderSizePixel = 0
        dropdownList.Visible = false
        dropdownList.ZIndex = 100 -- High ZIndex to appear above everything
        dropdownList.Parent = screenGui -- Add to ScreenGui instead of dropdownFrame
        
        local dropdownListCorner = Instance.new("UICorner")
        dropdownListCorner.CornerRadius = UDim.new(0, 5)
        dropdownListCorner.Parent = dropdownList
        
        local selectedOption = default or options[1]
        
        for i, option in ipairs(options) do
            local optionButton = Instance.new("TextButton")
            optionButton.Size = UDim2.new(1, 0, 0, 30)
            optionButton.Position = UDim2.new(0, 0, 0, (i-1) * 30)
            optionButton.BackgroundTransparency = 1
            optionButton.Text = option
            optionButton.TextColor3 = settings.theme.text
            optionButton.TextSize = 14
            optionButton.Font = Enum.Font.Gotham
            optionButton.ZIndex = 101 -- Even higher ZIndex
            optionButton.Parent = dropdownList
            
            optionButton.MouseButton1Click:Connect(function()
                selectedOption = option
                dropdownButton.Text = option
                dropdownList.Visible = false
            end)
        end
        
        -- Update dropdown list position when button is clicked
        dropdownButton.MouseButton1Click:Connect(function()
            -- Calculate absolute position for dropdown list
            local buttonAbsolutePosition = dropdownButton.AbsolutePosition
            local buttonAbsoluteSize = dropdownButton.AbsoluteSize
            
            -- Position the dropdown list below the button
            dropdownList.Position = UDim2.new(
                0, buttonAbsolutePosition.X,
                0, buttonAbsolutePosition.Y + buttonAbsoluteSize.Y
            )
            
            -- Match width with the button
            dropdownList.Size = UDim2.new(
                0, buttonAbsoluteSize.X,
                0, #options * 30
            )
            
            dropdownList.Visible = not dropdownList.Visible
        end)
        
        -- Close dropdown when clicking elsewhere
        UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                local position = input.Position
                local dropdownListAbsolutePosition = dropdownList.AbsolutePosition
                local dropdownListAbsoluteSize = dropdownList.AbsoluteSize
                
                -- Check if click is outside the dropdown list
                if position.X < dropdownListAbsolutePosition.X or
                   position.X > dropdownListAbsolutePosition.X + dropdownListAbsoluteSize.X or
                   position.Y < dropdownListAbsolutePosition.Y or
                   position.Y > dropdownListAbsolutePosition.Y + dropdownListAbsoluteSize.Y then
                    
                    -- Also check if click is not on the dropdown button
                    local buttonAbsolutePosition = dropdownButton.AbsolutePosition
                    local buttonAbsoluteSize = dropdownButton.AbsoluteSize
                    
                    if position.X < buttonAbsolutePosition.X or
                       position.X > buttonAbsolutePosition.X + buttonAbsoluteSize.X or
                       position.Y < buttonAbsolutePosition.Y or
                       position.Y > buttonAbsolutePosition.Y + buttonAbsoluteSize.Y then
                        
                        dropdownList.Visible = false
                    end
                end
            end
        end)
        
        local dropdown = {
            instance = dropdownFrame,
            value = function() return selectedOption end,
            set = function(option)
                if table.find(options, option) then
                    selectedOption = option
                    dropdownButton.Text = option
                end
            end
        }
        
        return dropdown
    end
    
    function UI:AddInput(tabIndex, text, placeholder, default)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        local inputFrame = Instance.new("Frame")
        inputFrame.Size = UDim2.new(1, 0, 0, 40)
        inputFrame.BackgroundTransparency = 1
        inputFrame.Parent = tab.page
        
        local inputLabel = Instance.new("TextLabel")
        inputLabel.Size = UDim2.new(0.4, 0, 1, 0)
        inputLabel.Position = UDim2.new(0, 0, 0, 0)
        inputLabel.BackgroundTransparency = 1
        inputLabel.Text = text
        inputLabel.TextColor3 = settings.theme.text
        inputLabel.TextSize = 14
        inputLabel.Font = Enum.Font.Gotham
        inputLabel.TextXAlignment = Enum.TextXAlignment.Left
        inputLabel.Parent = inputFrame
        
        local inputBox = Instance.new("TextBox")
        inputBox.Size = UDim2.new(0.6, -10, 0, 30)
        inputBox.Position = UDim2.new(0.4, 5, 0.5, -15)
        inputBox.BackgroundColor3 = settings.theme.background
        inputBox.BorderSizePixel = 0
        inputBox.Text = default or ""
        inputBox.PlaceholderText = placeholder
        inputBox.TextColor3 = settings.theme.text
        inputBox.PlaceholderColor3 = Color3.fromRGB(180, 180, 180)
        inputBox.TextSize = 14
        inputBox.Font = Enum.Font.Gotham
        inputBox.Parent = inputFrame
        
        local inputBoxCorner = Instance.new("UICorner")
        inputBoxCorner.CornerRadius = UDim.new(0, 5)
        inputBoxCorner.Parent = inputBox
        
        local input = {
            instance = inputFrame,
            value = function() return inputBox.Text end,
            set = function(text)
                inputBox.Text = text
            end
        }
        
        return input
    end
    
    function UI:AddButton(tabIndex, text, callback)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        local buttonFrame = Instance.new("TextButton")
        buttonFrame.Size = UDim2.new(1, 0, 0, 40)
        buttonFrame.BackgroundColor3 = settings.theme.accent
        buttonFrame.BorderSizePixel = 0
        buttonFrame.Text = text
        buttonFrame.TextColor3 = settings.theme.text
        buttonFrame.TextSize = 14
        buttonFrame.Font = Enum.Font.GothamBold
        buttonFrame.Parent = tab.page
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 5)
        buttonCorner.Parent = buttonFrame
        
        buttonFrame.MouseButton1Click:Connect(callback or function() end)
        
        local button = {
            instance = buttonFrame,
            setText = function(newText)
                buttonFrame.Text = newText
            end
        }
        
        return button
    end
    
    -- Notification system
    function UI:Notify(text, duration)
        duration = duration or 3
        
        local notification = Instance.new("Frame")
        notification.Name = "Notification"
        notification.Size = UDim2.new(0, 200, 0, 60)
        notification.Position = UDim2.new(0.5, -100, 0.9, -30)
        notification.BackgroundColor3 = settings.theme.background
        notification.BackgroundTransparency = 0.1
        notification.BorderSizePixel = 0
        notification.Parent = screenGui
        
        local notifCorner = Instance.new("UICorner")
        notifCorner.CornerRadius = UDim.new(0, 8)
        notifCorner.Parent = notification
        
        local notifText = Instance.new("TextLabel")
        notifText.Size = UDim2.new(1, -20, 1, 0)
        notifText.Position = UDim2.new(0, 10, 0, 0)
        notifText.BackgroundTransparency = 1
        notifText.Text = text
        notifText.TextColor3 = settings.theme.text
        notifText.TextSize = 14
        notifText.Font = Enum.Font.GothamSemibold
        notifText.TextWrapped = true
        notifText.Parent = notification
        
        -- Animate in
        notification.Position = UDim2.new(0.5, -100, 1, 0)
        local inTween = TweenService:Create(
            notification,
            TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
            {Position = UDim2.new(0.5, -100, 0.9, -30)}
        )
        inTween:Play()
        
        -- Animate out after duration
        task.delay(duration, function()
            local outTween = TweenService:Create(
                notification,
                TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In),
                {Position = UDim2.new(0.5, -100, 1, 0)}
            )
            outTween:Play()
            
            outTween.Completed:Connect(function()
                notification:Destroy()
            end)
        end)
    end
    
    -- Destroy UI
    function UI:Destroy()
        screenGui:Destroy()
        
        -- Remove from UIs table
        for i, ui in ipairs(UIs) do
            if ui == self then
                table.remove(UIs, i)
                break
            end
        end
    end
    
    -- Add UI to UIs table
    table.insert(UIs, UI)
    
    -- Notify that the UI has loaded
    UI:Notify(settings.title .. " Loaded", 3)
    
    return UI
end

-- Example usage
--[[
local ui = VTripLibrary.new({
    title = "VTriP Menu",
    subtitle = "Premium Edition",
    toggleKey = Enum.KeyCode.M
})

local combatTab = ui:AddTab("Combat", Color3.fromRGB(200, 100, 100))
local espTab = ui:AddTab("ESP", Color3.fromRGB(100, 200, 100))
local miscTab = ui:AddTab("Misc", Color3.fromRGB(100, 100, 200))
local settingsTab = ui:AddTab("Settings", Color3.fromRGB(200, 200, 100))

-- Combat tab
ui:AddSection(1, "Aimbot")
ui:AddToggle(1, "Enable Aimbot", false)
ui:AddToggle(1, "Visible Check", true)
ui:AddSlider(1, "Smoothness", 0, 10, 2)
ui:AddDropdown(1, "Aim Part", {"Head", "Torso", "Random"}, "Head")

-- ESP tab
ui:AddSection(2, "Player ESP")
ui:AddToggle(2, "Enable ESP", false)
ui:AddToggle(2, "Box ESP", true)
ui:AddToggle(2, "Name ESP", true)

-- Misc tab
ui:AddSection(3, "Character")
ui:AddSlider(3, "Walk Speed", 16, 100, 16)
ui:AddButton(3, "Reset Character", function()
    if Players.LocalPlayer.Character then
        Players.LocalPlayer.Character:BreakJoints()
    end
end)

-- Settings tab
ui:AddSection(4, "Menu Settings")
ui:AddToggle(4, "Rainbow Theme", false)
ui:AddSlider(4, "Menu Opacity", 0.1, 1, 0.8)
]]--

return VTripLibrary