--[[
    VTriP UI Library v5.1
    Created by VTriP Official
    Enhanced by v0
    
    A premium UI library for Roblox exploits
    Mobile & PC Compatible - Enhanced Android Support
    
    Version 5.1 - Professional Edition with Modern Shadows
]]

local VTripLibrary = {}
local UIs = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")
local LocalPlayer = Players.LocalPlayer
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Default settings
local defaultSettings = {
    title = "VTriP Menu",
    subtitle = "Professional Edition",
    theme = {
        background = Color3.fromRGB(15, 15, 20),
        foreground = Color3.fromRGB(22, 22, 30),
        accent = Color3.fromRGB(120, 90, 255),
        text = Color3.fromRGB(255, 255, 255),
        subtext = Color3.fromRGB(180, 180, 200),
        success = Color3.fromRGB(80, 200, 120),
        warning = Color3.fromRGB(255, 180, 70),
        error = Color3.fromRGB(255, 80, 80),
        border = Color3.fromRGB(40, 40, 50)
    },
    size = UDim2.new(0, 520, 0, 420),
    position = UDim2.new(0.5, -260, 0.5, -210),
    toggleKey = Enum.KeyCode.M,
    roundness = 16,
    animations = true,
    defaultIcon = "rbxassetid://7734110588",
    animationSpeed = 0.3,
    modernShadows = true,
    glassMorphism = true,
    tabStyle = "horizontal"
}

-- Utility functions
local function lerp(a, b, t)
    return a + (b - a) * t
end

local function createStroke(parent, color, thickness, transparency)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color
    stroke.Thickness = thickness or 1
    stroke.Transparency = transparency or 0
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Parent = parent
    return stroke
end

-- Modern shadow system (optimized)
local function createModernShadow(parent, intensity, offset, blur)
    intensity = intensity or 0.3
    offset = offset or 8
    blur = blur or 20
    
    -- Only create shadow for main elements, not all elements
    if parent.Name == "OpenButton" or parent.Name == "TabBar" or parent.Name == "ContentFrame" then
        return nil -- Skip shadow for these elements
    end
    
    -- Create single shadow layer instead of multiple
    local shadow = Instance.new("Frame")
    shadow.Name = "ModernShadow"
    shadow.Size = UDim2.new(1, offset, 1, offset)
    shadow.Position = UDim2.new(0, -offset/2, 0, offset/2)
    shadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    shadow.BackgroundTransparency = intensity
    shadow.BorderSizePixel = 0
    shadow.ZIndex = math.max(1, parent.ZIndex - 1)
    shadow.Parent = parent.Parent
    
    local shadowCorner = Instance.new("UICorner")
    shadowCorner.CornerRadius = parent:FindFirstChild("UICorner") and parent:FindFirstChild("UICorner").CornerRadius or UDim.new(0, 8)
    shadowCorner.Parent = shadow
    
    -- Store reference to shadow for cleanup
    parent:SetAttribute("ShadowRef", shadow)
    
    return shadow
end

-- Enhanced gradient background
local function createGradientBackground(parent, colors, rotation)
    colors = colors or {
        Color3.fromRGB(15, 15, 20),
        Color3.fromRGB(25, 25, 35)
    }
    rotation = rotation or 45
    
    local gradient = Instance.new("UIGradient")
    gradient.Rotation = rotation
    
    local colorSequence = {}
    for i, color in ipairs(colors) do
        table.insert(colorSequence, ColorSequenceKeypoint.new((i - 1) / (#colors - 1), color))
    end
    gradient.Color = ColorSequence.new(colorSequence)
    gradient.Parent = parent
    
    return gradient
end

-- Animated border effect
local function createAnimatedBorder(parent, color, thickness)
    local border = createStroke(parent, color, thickness, 0.7)
    
    -- Animate border opacity
    local function animateBorder()
        local tween1 = TweenService:Create(border, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Transparency = 0.3})
        local tween2 = TweenService:Create(border, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Transparency = 0.8})
        
        tween1:Play()
        tween1.Completed:Connect(function()
            tween2:Play()
            tween2.Completed:Connect(animateBorder)
        end)
    end
    
    animateBorder()
    return border
end

-- Create a new UI
function VTripLibrary.new(settings)
    settings = settings or {}
    
    -- Merge with default settings
    for key, value in pairs(defaultSettings) do
        if settings[key] == nil then
            settings[key] = value
        elseif key == "theme" and type(settings[key]) == "table" then
            for themeKey, themeValue in pairs(defaultSettings[key]) do
                if settings[key][themeKey] == nil then
                    settings[key][themeKey] = themeValue
                end
            end
        end
    end
    
    -- Adjust size for mobile
    if isMobile then
        settings.size = UDim2.new(0, math.min(520, workspace.CurrentCamera.ViewportSize.X * 0.9), 0, 420)
        settings.position = UDim2.new(0.5, -settings.size.X.Offset/2, 0.5, -210)
    end
    
    -- Create UI instance
    local UI = {}
    UI.settings = settings
    UI.tabs = {}
    UI.selectedTab = 1
    UI.elements = {}
    
    -- Create the main GUI
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VTripMenu_" .. #UIs + 1
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Try to use CoreGui for better protection
    pcall(function()
        screenGui.Parent = game:GetService("CoreGui")
    end)
    
    -- Fallback to PlayerGui if CoreGui fails
    if not screenGui.Parent then
        screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    end
    
    UI.screenGui = screenGui
    
    -- Create open button (initially hidden) - NO SHADOW
    local openButton = Instance.new("TextButton")
    openButton.Name = "OpenButton"
    openButton.Size = UDim2.new(0, 160, 0, 50)
    openButton.Position = UDim2.new(0.5, -80, 0, 15)
    openButton.BackgroundColor3 = settings.theme.accent
    openButton.BackgroundTransparency = 0.1
    openButton.Text = "Open VTriP"
    openButton.TextColor3 = settings.theme.text
    openButton.TextSize = 16
    openButton.Font = Enum.Font.GothamBold
    openButton.Visible = false
    openButton.ZIndex = 10
    openButton.Parent = screenGui
    UI.openButton = openButton
    
    local openButtonCorner = Instance.new("UICorner")
    openButtonCorner.CornerRadius = UDim.new(0, settings.roundness)
    openButtonCorner.Parent = openButton
    
    -- Add gradient to open button
    createGradientBackground(openButton, {settings.theme.accent, Color3.fromRGB(
        settings.theme.accent.R * 1.2,
        settings.theme.accent.G * 1.2,
        settings.theme.accent.B * 1.2
    )})
    
    -- Main frame settings - WITH MODERN SHADOW
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = settings.size
    mainFrame.Position = settings.position
    mainFrame.BackgroundColor3 = settings.theme.background
    mainFrame.BackgroundTransparency = 0.02
    mainFrame.BorderSizePixel = 0
    mainFrame.ZIndex = 1
    mainFrame.Parent = screenGui
    UI.mainFrame = mainFrame
    
    -- Add rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, settings.roundness)
    uiCorner.Parent = mainFrame
    
    -- Add modern shadow to main frame
    if settings.modernShadows then
        createModernShadow(mainFrame, 0.4, 12, 25)
    end
    
    -- Add gradient background to main frame
    createGradientBackground(mainFrame, {
        settings.theme.background,
        Color3.fromRGB(
            settings.theme.background.R * 1.1,
            settings.theme.background.G * 1.1,
            settings.theme.background.B * 1.1
        )
    }, 135)
    
    -- Add animated border
    createAnimatedBorder(mainFrame, settings.theme.accent, 1)
    
    -- Create top bar
    local topBar = Instance.new("Frame")
    topBar.Name = "TopBar"
    topBar.Size = UDim2.new(1, 0, 0, 60)
    topBar.BackgroundColor3 = settings.theme.foreground
    topBar.BackgroundTransparency = 0.1
    topBar.BorderSizePixel = 0
    topBar.ZIndex = 2
    topBar.Parent = mainFrame
    UI.topBar = topBar
    
    local topBarCorner = Instance.new("UICorner")
    topBarCorner.CornerRadius = UDim.new(0, settings.roundness)
    topBarCorner.Parent = topBar
    
    -- Add gradient to top bar
    createGradientBackground(topBar, {
        settings.theme.foreground,
        Color3.fromRGB(
            settings.theme.foreground.R * 1.15,
            settings.theme.foreground.G * 1.15,
            settings.theme.foreground.B * 1.15
        )
    }, 90)
    
    -- Create a frame to hide the rounded corners at the bottom of the top bar
    local topBarBottomCover = Instance.new("Frame")
    topBarBottomCover.Name = "BottomCover"
    topBarBottomCover.Size = UDim2.new(1, 0, 0, settings.roundness)
    topBarBottomCover.Position = UDim2.new(0, 0, 1, -settings.roundness)
    topBarBottomCover.BackgroundColor3 = settings.theme.foreground
    topBarBottomCover.BackgroundTransparency = 0.1
    topBarBottomCover.BorderSizePixel = 0
    topBarBottomCover.ZIndex = topBar.ZIndex
    topBarBottomCover.Parent = topBar
    
    -- Add gradient to bottom cover
    createGradientBackground(topBarBottomCover, {
        settings.theme.foreground,
        Color3.fromRGB(
            settings.theme.foreground.R * 1.15,
            settings.theme.foreground.G * 1.15,
            settings.theme.foreground.B * 1.15
        )
    }, 90)
    
    -- Add logo/icon
    local logoIcon = Instance.new("ImageLabel")
    logoIcon.Name = "LogoIcon"
    logoIcon.Size = UDim2.new(0, 35, 0, 35)
    logoIcon.Position = UDim2.new(0, 15, 0, 12)
    logoIcon.BackgroundTransparency = 1
    logoIcon.Image = settings.defaultIcon
    logoIcon.ImageColor3 = settings.theme.accent
    logoIcon.ZIndex = 3
    logoIcon.Parent = topBar
    
    local logoCorner = Instance.new("UICorner")
    logoCorner.CornerRadius = UDim.new(0, 8)
    logoCorner.Parent = logoIcon
    
    -- Add title (with fixed size and text wrapping)
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(0, 220, 0, 25)
    titleLabel.Position = UDim2.new(0, 60, 0, 8)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = settings.title
    titleLabel.TextColor3 = settings.theme.text
    titleLabel.TextSize = 20
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextWrapped = true
    titleLabel.ClipsDescendants = true
    titleLabel.ZIndex = 3
    titleLabel.Parent = topBar
    UI.titleLabel = titleLabel
    
    -- Add subtitle (with fixed size and text wrapping)
    local subtitleLabel = Instance.new("TextLabel")
    subtitleLabel.Name = "SubtitleLabel"
    subtitleLabel.Size = UDim2.new(0, 220, 0, 20)
    subtitleLabel.Position = UDim2.new(0, 60, 0, 35)
    subtitleLabel.BackgroundTransparency = 1
    subtitleLabel.Text = settings.subtitle
    subtitleLabel.TextColor3 = settings.theme.subtext
    subtitleLabel.TextSize = 14
    subtitleLabel.Font = Enum.Font.Gotham
    subtitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    subtitleLabel.TextWrapped = true
    subtitleLabel.ClipsDescendants = true
    subtitleLabel.ZIndex = 3
    subtitleLabel.Parent = topBar
    UI.subtitleLabel = subtitleLabel
    
    -- Add minimize button
    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Name = "MinimizeButton"
    minimizeButton.Size = UDim2.new(0, 35, 0, 35)
    minimizeButton.Position = UDim2.new(1, -85, 0, 12)
    minimizeButton.BackgroundColor3 = settings.theme.warning
    minimizeButton.BackgroundTransparency = 0.1
    minimizeButton.Text = "−"
    minimizeButton.TextColor3 = settings.theme.text
    minimizeButton.TextSize = 18
    minimizeButton.Font = Enum.Font.GothamBold
    minimizeButton.ZIndex = 3
    minimizeButton.Parent = topBar
    UI.minimizeButton = minimizeButton
    
    local minimizeCorner = Instance.new("UICorner")
    minimizeCorner.CornerRadius = UDim.new(0, 8)
    minimizeCorner.Parent = minimizeButton
    
    -- Add close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 35, 0, 35)
    closeButton.Position = UDim2.new(1, -45, 0, 12)
    closeButton.BackgroundColor3 = settings.theme.error
    closeButton.BackgroundTransparency = 0.1
    closeButton.Text = "✕"
    closeButton.TextColor3 = settings.theme.text
    closeButton.TextSize = 16
    closeButton.Font = Enum.Font.GothamBold
    closeButton.ZIndex = 3
    closeButton.Parent = topBar
    UI.closeButton = closeButton
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 8)
    closeCorner.Parent = closeButton
    
    -- Create horizontal tab bar for tab buttons
    local tabBar = Instance.new("Frame")
    tabBar.Name = "TabBar"
    tabBar.Size = UDim2.new(1, 0, 0, 45)
    tabBar.Position = UDim2.new(0, 0, 0, 60)
    tabBar.BackgroundColor3 = settings.theme.foreground
    tabBar.BackgroundTransparency = 0.3
    tabBar.BorderSizePixel = 0
    tabBar.ZIndex = 2
    tabBar.Parent = mainFrame
    UI.tabBar = tabBar

    local tabBarCorner = Instance.new("UICorner")
    tabBarCorner.CornerRadius = UDim.new(0, settings.roundness)
    tabBarCorner.Parent = tabBar

    -- Create a frame to hide the rounded corners at the top of the tab bar
    local tabBarTopCover = Instance.new("Frame")
    tabBarTopCover.Name = "TopCover"
    tabBarTopCover.Size = UDim2.new(1, 0, 0, settings.roundness)
    tabBarTopCover.Position = UDim2.new(0, 0, 0, 0)
    tabBarTopCover.BackgroundColor3 = settings.theme.foreground
    tabBarTopCover.BackgroundTransparency = 0.3
    tabBarTopCover.BorderSizePixel = 0
    tabBarTopCover.ZIndex = tabBar.ZIndex
    tabBarTopCover.Parent = tabBar

    -- Create tab buttons container with scrolling
    local tabButtonsFrame = Instance.new("ScrollingFrame")
    tabButtonsFrame.Name = "TabButtonsFrame"
    tabButtonsFrame.Size = UDim2.new(1, 0, 1, 0)
    tabButtonsFrame.BackgroundTransparency = 1
    tabButtonsFrame.BorderSizePixel = 0
    tabButtonsFrame.ScrollBarThickness = 3
    tabButtonsFrame.ScrollBarImageColor3 = settings.theme.accent
    tabButtonsFrame.ScrollingDirection = Enum.ScrollingDirection.X
    tabButtonsFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    tabButtonsFrame.ZIndex = 3
    tabButtonsFrame.Parent = tabBar
    UI.tabButtonsFrame = tabButtonsFrame

    -- Add layout for tab buttons
    local tabButtonsLayout = Instance.new("UIListLayout")
    tabButtonsLayout.Padding = UDim.new(0, 12)
    tabButtonsLayout.FillDirection = Enum.FillDirection.Horizontal
    tabButtonsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    tabButtonsLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    tabButtonsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabButtonsLayout.Parent = tabButtonsFrame

    -- Add padding for tab buttons
    local tabButtonsPadding = Instance.new("UIPadding")
    tabButtonsPadding.PaddingLeft = UDim.new(0, 15)
    tabButtonsPadding.PaddingRight = UDim.new(0, 15)
    tabButtonsPadding.Parent = tabButtonsFrame

    -- Update content frame position and size to account for horizontal tabs
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "ContentFrame"
    contentFrame.Size = UDim2.new(1, -30, 1, -120)
    contentFrame.Position = UDim2.new(0, 15, 0, 110)
    contentFrame.BackgroundTransparency = 1
    contentFrame.BorderSizePixel = 0
    contentFrame.ZIndex = 2
    contentFrame.Parent = mainFrame
    UI.contentFrame = contentFrame
    
    -- Add drag functionality
    local isDragging = false
    local dragStart = nil
    local startPos = nil
    
    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X, 
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = false
        end
    end)
    
    -- Close button functionality (hide menu and show open button)
    closeButton.MouseButton1Click:Connect(function()
        if settings.animations then
            -- Animate closing
            local closeTween = TweenService:Create(
                mainFrame, 
                TweenInfo.new(settings.animationSpeed, Enum.EasingStyle.Back, Enum.EasingDirection.In), 
                {
                    Size = UDim2.new(0, 0, 0, 0),
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    BackgroundTransparency = 1
                }
            )
            closeTween:Play()
            
            closeTween.Completed:Connect(function()
                mainFrame.Visible = false
                openButton.Visible = true
                
                -- Reset size and position for next opening
                mainFrame.Size = settings.size
                mainFrame.Position = settings.position
                mainFrame.BackgroundTransparency = 0.02
            end)
        else
            mainFrame.Visible = false
            openButton.Visible = true
        end
    end)
    
    -- Minimize button functionality
    minimizeButton.MouseButton1Click:Connect(function()
        closeButton.MouseButton1Click:Fire()
    end)
    
    -- Open button functionality
    openButton.MouseButton1Click:Connect(function()
        openButton.Visible = false
        
        if settings.animations then
            -- Reset for animation
            mainFrame.Size = UDim2.new(0, 0, 0, 0)
            mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
            mainFrame.BackgroundTransparency = 1
            mainFrame.Visible = true
            
            -- Animate opening
            local openTween = TweenService:Create(
                mainFrame, 
                TweenInfo.new(settings.animationSpeed * 1.2, Enum.EasingStyle.Back, Enum.EasingDirection.Out), 
                {
                    Size = settings.size,
                    Position = settings.position,
                    BackgroundTransparency = 0.02
                }
            )
            openTween:Play()
        else
            mainFrame.Visible = true
        end
    end)
    
    -- Toggle menu visibility with a key (for PC users)
    local toggleKey = settings.toggleKey
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == toggleKey then
            if mainFrame.Visible then
                closeButton.MouseButton1Click:Fire()
            else
                openButton.MouseButton1Click:Fire()
            end
        end
    end)
    
    -- Update tab functionality
    function UI:AddTab(name, icon)
        local iconId = icon or settings.defaultIcon
        
        local tabIndex = #self.tabs + 1
        local tab = {
            name = name,
            icon = iconId,
            elements = {}
        }
        
        -- Create tab button
        local tabButton = Instance.new("Frame")
        tabButton.Name = "Tab" .. tabIndex
        tabButton.Size = UDim2.new(0, 140, 0, 38)
        tabButton.BackgroundColor3 = settings.theme.background
        tabButton.BackgroundTransparency = 0.4
        tabButton.LayoutOrder = tabIndex
        tabButton.ZIndex = 4
        tabButton.Parent = self.tabButtonsFrame
        tab.button = tabButton
        
        local tabButtonCorner = Instance.new("UICorner")
        tabButtonCorner.CornerRadius = UDim.new(0, 10)
        tabButtonCorner.Parent = tabButton
        
        -- Add icon
        local tabIcon = Instance.new("ImageLabel")
        tabIcon.Name = "Icon"
        tabIcon.Size = UDim2.new(0, 22, 0, 22)
        tabIcon.Position = UDim2.new(0, 12, 0.5, -11)
        tabIcon.BackgroundTransparency = 1
        tabIcon.Image = iconId
        tabIcon.ImageColor3 = settings.theme.subtext
        tabIcon.ZIndex = 5
        tabIcon.Parent = tabButton
        tab.icon = tabIcon
        
        -- Add text label
        local tabText = Instance.new("TextLabel")
        tabText.Name = "Text"
        tabText.Size = UDim2.new(1, -45, 1, 0)
        tabText.Position = UDim2.new(0, 40, 0, 0)
        tabText.BackgroundTransparency = 1
        tabText.Text = name
        tabText.TextColor3 = settings.theme.subtext
        tabText.TextSize = 14
        tabText.Font = Enum.Font.GothamSemibold
        tabText.TextXAlignment = Enum.TextXAlignment.Left
        tabText.ZIndex = 5
        tabText.Parent = tabButton
        tab.text = tabText
        
        -- Add selection indicator (glow effect)
        local selectionGlow = Instance.new("Frame")
        selectionGlow.Name = "SelectionGlow"
        selectionGlow.Size = UDim2.new(1, 4, 1, 4)
        selectionGlow.Position = UDim2.new(0, -2, 0, -2)
        selectionGlow.BackgroundColor3 = settings.theme.accent
        selectionGlow.BackgroundTransparency = 1
        selectionGlow.BorderSizePixel = 0
        selectionGlow.ZIndex = 3
        selectionGlow.Parent = tabButton
        tab.selectionGlow = selectionGlow
        
        local selectionGlowCorner = Instance.new("UICorner")
        selectionGlowCorner.CornerRadius = UDim.new(0, 12)
        selectionGlowCorner.Parent = selectionGlow
        
        -- Create click detector
        local clickDetector = Instance.new("TextButton")
        clickDetector.Name = "ClickDetector"
        clickDetector.Size = UDim2.new(1, 0, 1, 0)
        clickDetector.BackgroundTransparency = 1
        clickDetector.Text = ""
        clickDetector.ZIndex = 6
        clickDetector.Parent = tabButton
        tab.clickDetector = clickDetector
        
        -- Create content page for this tab
        local tabPage = Instance.new("ScrollingFrame")
        tabPage.Name = "Page" .. tabIndex
        tabPage.Size = UDim2.new(1, 0, 1, 0)
        tabPage.BackgroundTransparency = 1
        tabPage.BorderSizePixel = 0
        tabPage.ScrollBarThickness = 5
        tabPage.ScrollBarImageColor3 = settings.theme.accent
        tabPage.Visible = tabIndex == 1
        tabPage.ZIndex = 3
        tabPage.Parent = self.contentFrame
        tab.page = tabPage
        
        -- Add padding to the content
        local padding = Instance.new("UIPadding")
        padding.PaddingLeft = UDim.new(0, 12)
        padding.PaddingRight = UDim.new(0, 12)
        padding.PaddingTop = UDim.new(0, 12)
        padding.PaddingBottom = UDim.new(0, 12)
        padding.Parent = tabPage
        
        -- Add layout for content
        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 12)
        layout.SortOrder = Enum.SortOrder.LayoutOrder
        layout.Parent = tabPage
        tab.layout = layout
        
        -- Tab button click handler
        clickDetector.MouseButton1Click:Connect(function()
            -- Hide all pages and reset tab button styling
            for _, otherTab in ipairs(self.tabs) do
                otherTab.page.Visible = false
                
                if settings.animations then
                    TweenService:Create(otherTab.icon, TweenInfo.new(0.3), {ImageColor3 = settings.theme.subtext}):Play()
                    TweenService:Create(otherTab.text, TweenInfo.new(0.3), {TextColor3 = settings.theme.subtext}):Play()
                    TweenService:Create(otherTab.button, TweenInfo.new(0.3), {BackgroundTransparency = 0.4}):Play()
                    TweenService:Create(otherTab.selectionGlow, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
                else
                    otherTab.icon.ImageColor3 = settings.theme.subtext
                    otherTab.text.TextColor3 = settings.theme.subtext
                    otherTab.button.BackgroundTransparency = 0.4
                    otherTab.selectionGlow.BackgroundTransparency = 1
                end
            end
        
            -- Show selected page and update tab button styling
            tabPage.Visible = true
            
            if settings.animations then
                TweenService:Create(tabIcon, TweenInfo.new(0.3), {ImageColor3 = settings.theme.accent}):Play()
                TweenService:Create(tabText, TweenInfo.new(0.3), {TextColor3 = settings.theme.accent}):Play()
                TweenService:Create(tabButton, TweenInfo.new(0.3), {BackgroundTransparency = 0.2}):Play()
                TweenService:Create(selectionGlow, TweenInfo.new(0.3), {BackgroundTransparency = 0.7}):Play()
            else
                tabIcon.ImageColor3 = settings.theme.accent
                tabText.TextColor3 = settings.theme.accent
                tabButton.BackgroundTransparency = 0.2
                selectionGlow.BackgroundTransparency = 0.7
            end
        
            self.selectedTab = tabIndex
        end)
        
        -- Hover effects
        clickDetector.MouseEnter:Connect(function()
            if self.selectedTab ~= tabIndex then
                if settings.animations then
                    TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.3}):Play()
                else
                    tabButton.BackgroundTransparency = 0.3
                end
            end
        end)
        
        clickDetector.MouseLeave:Connect(function()
            if self.selectedTab ~= tabIndex then
                if settings.animations then
                    TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.4}):Play()
                else
                    tabButton.BackgroundTransparency = 0.4
                end
            end
        end)
        
        -- Auto-size the scrolling frame
        layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabPage.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 24)
        end)
        
        -- Add tab to tabs table
        table.insert(self.tabs, tab)
        
        -- Set as selected if it's the first tab
        if tabIndex == 1 then
            tabIcon.ImageColor3 = settings.theme.accent
            tabText.TextColor3 = settings.theme.accent
            tabButton.BackgroundTransparency = 0.2
            selectionGlow.BackgroundTransparency = 0.7
        end
        
        -- Update tab buttons container canvas size
        tabButtonsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabButtonsFrame.CanvasSize = UDim2.new(0, tabButtonsLayout.AbsoluteContentSize.X + 30, 0, 0)
        end)
        
        return tab
    end
    
    -- Add elements to tabs
    function UI:AddSection(tabIndex, text)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        local sectionFrame = Instance.new("Frame")
        sectionFrame.Name = "Section_" .. text
        sectionFrame.Size = UDim2.new(1, 0, 0, 40)
        sectionFrame.BackgroundTransparency = 1
        sectionFrame.ZIndex = 4
        sectionFrame.Parent = tab.page
        
        local sectionLabel = Instance.new("TextLabel")
        sectionLabel.Size = UDim2.new(1, 0, 1, 0)
        sectionLabel.BackgroundTransparency = 1
        sectionLabel.Text = text
        sectionLabel.TextColor3 = settings.theme.accent
        sectionLabel.TextSize = 18
        sectionLabel.Font = Enum.Font.GothamBold
        sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
        sectionLabel.ZIndex = 5
        sectionLabel.Parent = sectionFrame
        
        local sectionLine = Instance.new("Frame")
        sectionLine.Size = UDim2.new(1, 0, 0, 2)
        sectionLine.Position = UDim2.new(0, 0, 1, -2)
        sectionLine.BackgroundColor3 = settings.theme.accent
        sectionLine.BackgroundTransparency = 0.3
        sectionLine.BorderSizePixel = 0
        sectionLine.ZIndex = 5
        sectionLine.Parent = sectionFrame
        
        local sectionLineCorner = Instance.new("UICorner")
        sectionLineCorner.CornerRadius = UDim.new(0, 1)
        sectionLineCorner.Parent = sectionLine
        
        return sectionFrame
    end
    
    function UI:AddToggle(tabIndex, text, default, callback)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        local toggleFrame = Instance.new("Frame")
        toggleFrame.Name = "Toggle_" .. text
        toggleFrame.Size = UDim2.new(1, 0, 0, 45)
        toggleFrame.BackgroundColor3 = settings.theme.foreground
        toggleFrame.BackgroundTransparency = 0.3
        toggleFrame.BorderSizePixel = 0
        toggleFrame.ZIndex = 4
        toggleFrame.Parent = tab.page
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 12)
        toggleCorner.Parent = toggleFrame
        
        -- Add subtle border
        createStroke(toggleFrame, settings.theme.border, 1, 0.5)
        
        local toggleLabel = Instance.new("TextLabel")
        toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
        toggleLabel.Position = UDim2.new(0, 15, 0, 0)
        toggleLabel.BackgroundTransparency = 1
        toggleLabel.Text = text
        toggleLabel.TextColor3 = settings.theme.text
        toggleLabel.TextSize = 15
        toggleLabel.Font = Enum.Font.GothamSemibold
        toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
        toggleLabel.ZIndex = 5
        toggleLabel.Parent = toggleFrame
        
        local toggleButton = Instance.new("TextButton")
        toggleButton.Size = UDim2.new(0, 50, 0, 26)
        toggleButton.Position = UDim2.new(0.85, 0, 0.5, -13)
        toggleButton.BackgroundColor3 = default and settings.theme.success or settings.theme.error
        toggleButton.BorderSizePixel = 0
        toggleButton.Text = ""
        toggleButton.ZIndex = 5
        toggleButton.Parent = toggleFrame
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 13)
        toggleCorner.Parent = toggleButton
        
        local toggleCircle = Instance.new("Frame")
        toggleCircle.Size = UDim2.new(0, 20, 0, 20)
        toggleCircle.Position = default and UDim2.new(0.6, 0, 0.5, -10) or UDim2.new(0.1, 0, 0.5, -10)
        toggleCircle.BackgroundColor3 = settings.theme.text
        toggleCircle.BorderSizePixel = 0
        toggleCircle.ZIndex = 6
        toggleCircle.Parent = toggleButton
        
        local toggleCircleCorner = Instance.new("UICorner")
        toggleCircleCorner.CornerRadius = UDim.new(0, 10)
        toggleCircleCorner.Parent = toggleCircle
        
        local toggled = default
        
        -- Create a transparent button that covers the entire frame for clicking
        local clickArea = Instance.new("TextButton")
        clickArea.Name = "ClickArea"
        clickArea.Size = UDim2.new(1, 0, 1, 0)
        clickArea.BackgroundTransparency = 1
        clickArea.Text = ""
        clickArea.ZIndex = 7
        clickArea.Parent = toggleFrame
        
        -- Function to update toggle state
        local function updateToggle()
            toggled = not toggled
            
            local targetPosition = toggled and UDim2.new(0.6, 0, 0.5, -10) or UDim2.new(0.1, 0, 0.5, -10)
            local targetColor = toggled and settings.theme.success or settings.theme.error
            
            if settings.animations then
                TweenService:Create(toggleCircle, TweenInfo.new(0.3), {Position = targetPosition}):Play()
                TweenService:Create(toggleButton, TweenInfo.new(0.3), {BackgroundColor3 = targetColor}):Play()
            else
                toggleCircle.Position = targetPosition
                toggleButton.BackgroundColor3 = targetColor
            end
            
            if callback then
                callback(toggled)
            end
        end
        
        -- Connect click events
        toggleButton.MouseButton1Click:Connect(updateToggle)
        clickArea.MouseButton1Click:Connect(updateToggle)
        
        -- Add hover effect
        clickArea.MouseEnter:Connect(function()
            if settings.animations then
                TweenService:Create(toggleFrame, TweenInfo.new(0.2), {BackgroundTransparency = 0.2}):Play()
            else
                toggleFrame.BackgroundTransparency = 0.2
            end
        end)
        
        clickArea.MouseLeave:Connect(function()
            if settings.animations then
                TweenService:Create(toggleFrame, TweenInfo.new(0.2), {BackgroundTransparency = 0.3}):Play()
            else
                toggleFrame.BackgroundTransparency = 0.3
            end
        end)
        
        local toggle = {
            instance = toggleFrame,
            value = function() return toggled end,
            set = function(value)
                if toggled ~= value then
                    toggled = value
                    local targetPosition = toggled and UDim2.new(0.6, 0, 0.5, -10) or UDim2.new(0.1, 0, 0.5, -10)
                    local targetColor = toggled and settings.theme.success or settings.theme.error
                    
                    if settings.animations then
                        TweenService:Create(toggleCircle, TweenInfo.new(0.3), {Position = targetPosition}):Play()
                        TweenService:Create(toggleButton, TweenInfo.new(0.3), {BackgroundColor3 = targetColor}):Play()
                    else
                        toggleCircle.Position = targetPosition
                        toggleButton.BackgroundColor3 = targetColor
                    end
                    
                    if callback then
                        callback(toggled)
                    end
                end
            end
        }
        
        return toggle
    end
    
    function UI:AddSlider(tabIndex, text, min, max, default, callback)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        -- Ensure default is within range
        default = math.clamp(default or min, min, max)
        
        local sliderFrame = Instance.new("Frame")
        sliderFrame.Name = "Slider_" .. text
        sliderFrame.Size = UDim2.new(1, 0, 0, 65)
        sliderFrame.BackgroundColor3 = settings.theme.foreground
        sliderFrame.BackgroundTransparency = 0.3
        sliderFrame.BorderSizePixel = 0
        sliderFrame.ZIndex = 4
        sliderFrame.Parent = tab.page
        
        local sliderCorner = Instance.new("UICorner")
        sliderCorner.CornerRadius = UDim.new(0, 12)
        sliderCorner.Parent = sliderFrame
        
        -- Add subtle border
        createStroke(sliderFrame, settings.theme.border, 1, 0.5)
        
        local sliderLabel = Instance.new("TextLabel")
        sliderLabel.Size = UDim2.new(0.6, 0, 0, 22)
        sliderLabel.Position = UDim2.new(0, 15, 0, 8)
        sliderLabel.BackgroundTransparency = 1
        sliderLabel.Text = text
        sliderLabel.TextColor3 = settings.theme.text
        sliderLabel.TextSize = 15
        sliderLabel.Font = Enum.Font.GothamSemibold
        sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
        sliderLabel.ZIndex = 5
        sliderLabel.Parent = sliderFrame
        
        local valueLabel = Instance.new("TextLabel")
        valueLabel.Size = UDim2.new(0.25, 0, 0, 22)
        valueLabel.Position = UDim2.new(0.75, -15, 0, 8)
        valueLabel.BackgroundTransparency = 1
        valueLabel.Text = tostring(default)
        valueLabel.TextColor3 = settings.theme.accent
        valueLabel.TextSize = 15
        valueLabel.Font = Enum.Font.GothamBold
        valueLabel.TextXAlignment = Enum.TextXAlignment.Right
        valueLabel.ZIndex = 5
        valueLabel.Parent = sliderFrame
        
        local sliderBg = Instance.new("Frame")
        sliderBg.Size = UDim2.new(1, -30, 0, 12)
        sliderBg.Position = UDim2.new(0, 15, 0, 40)
        sliderBg.BackgroundColor3 = settings.theme.background
        sliderBg.BorderSizePixel = 0
        sliderBg.ZIndex = 5
        sliderBg.Parent = sliderFrame
        
        local sliderBgCorner = Instance.new("UICorner")
        sliderBgCorner.CornerRadius = UDim.new(0, 6)
        sliderBgCorner.Parent = sliderBg
        
        local sliderFill = Instance.new("Frame")
        sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        sliderFill.BackgroundColor3 = settings.theme.accent
        sliderFill.BorderSizePixel = 0
        sliderFill.ZIndex = 6
        sliderFill.Parent = sliderBg
        
        local sliderFillCorner = Instance.new("UICorner")
        sliderFillCorner.CornerRadius = UDim.new(0, 6)
        sliderFillCorner.Parent = sliderFill
        
        local sliderButton = Instance.new("TextButton")
        sliderButton.Size = UDim2.new(0, 22, 0, 22)
        sliderButton.Position = UDim2.new((default - min) / (max - min), -11, 0.5, -11)
        sliderButton.BackgroundColor3 = settings.theme.accent
        sliderButton.BorderSizePixel = 0
        sliderButton.Text = ""
        sliderButton.ZIndex = 7
        sliderButton.Parent = sliderBg
        
        local sliderButtonCorner = Instance.new("UICorner")
        sliderButtonCorner.CornerRadius = UDim.new(0, 11)
        sliderButtonCorner.Parent = sliderButton
        
        local value = default
        local dragging = false
        
        local function updateSlider(input)
            local relativePos = math.clamp((input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X, 0, 1)
            local newValue = min + (max - min) * relativePos
            
            -- Round to 1 decimal place if the range is large, otherwise use integers
            if max - min > 10 then
                newValue = math.floor(newValue * 10) / 10
            else
                newValue = math.floor(newValue)
            end
            
            -- Only update if value changed
            if newValue ~= value then
                value = newValue
                
                -- Update UI
                sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
                sliderButton.Position = UDim2.new(relativePos, -11, 0.5, -11)
                valueLabel.Text = tostring(value)
                
                -- Call callback
                if callback then
                    callback(value)
                end
            end
        end
        
        sliderButton.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                
                -- Make button slightly larger when dragging
                if settings.animations then
                    TweenService:Create(sliderButton, TweenInfo.new(0.2), {Size = UDim2.new(0, 28, 0, 28), Position = UDim2.new(sliderButton.Position.X.Scale, -14, 0.5, -14)}):Play()
                else
                    sliderButton.Size = UDim2.new(0, 28, 0, 28)
                    sliderButton.Position = UDim2.new(sliderButton.Position.X.Scale, -14, 0.5, -14)
                end
            end
        end)
        
        sliderBg.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                updateSlider(input)
                dragging = true
                
                -- Make button slightly larger when dragging
                if settings.animations then
                    TweenService:Create(sliderButton, TweenInfo.new(0.2), {Size = UDim2.new(0, 28, 0, 28), Position = UDim2.new(sliderButton.Position.X.Scale, -14, 0.5, -14)}):Play()
                else
                    sliderButton.Size = UDim2.new(0, 28, 0, 28)
                    sliderButton.Position = UDim2.new(sliderButton.Position.X.Scale, -14, 0.5, -14)
                end
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                updateSlider(input)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
                dragging = false
                
                -- Return button to normal size
                if settings.animations then
                    TweenService:Create(sliderButton, TweenInfo.new(0.2), {Size = UDim2.new(0, 22, 0, 22), Position = UDim2.new(sliderButton.Position.X.Scale, -11, 0.5, -11)}):Play()
                else
                    sliderButton.Size = UDim2.new(0, 22, 0, 22)
                    sliderButton.Position = UDim2.new(sliderButton.Position.X.Scale, -11, 0.5, -11)
                end
            end
        end)
        
        -- Add hover effect
        sliderFrame.MouseEnter:Connect(function()
            if settings.animations then
                TweenService:Create(sliderFrame, TweenInfo.new(0.2), {BackgroundTransparency = 0.2}):Play()
            else
                sliderFrame.BackgroundTransparency = 0.2
            end
        end)
        
        sliderFrame.MouseLeave:Connect(function()
            if settings.animations then
                TweenService:Create(sliderFrame, TweenInfo.new(0.2), {BackgroundTransparency = 0.3}):Play()
            else
                sliderFrame.BackgroundTransparency = 0.3
            end
        end)
        
        local slider = {
            instance = sliderFrame,
            value = function() return value end,
            set = function(newValue)
                newValue = math.clamp(newValue, min, max)
                
                -- Only update if value changed
                if value ~= newValue then
                    value = newValue
                    local relativePos = (value - min) / (max - min)
                    
                    -- Update UI
                    sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
                    sliderButton.Position = UDim2.new(relativePos, -11, 0.5, -11)
                    valueLabel.Text = tostring(value)
                    
                    -- Call callback
                    if callback then
                        callback(value)
                    end
                end
            end,
            setRange = function(newMin, newMax)
                min = newMin
                max = newMax
                
                -- Ensure value is within new range
                local newValue = math.clamp(value, min, max)
                if value ~= newValue then
                    value = newValue
                end
                
                -- Update UI
                local relativePos = (value - min) / (max - min)
                sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
                sliderButton.Position = UDim2.new(relativePos, -11, 0.5, -11)
                valueLabel.Text = tostring(value)
            end
        }
        
        return slider
    end
    
    function UI:AddDropdown(tabIndex, text, options, default, callback, autoUpdate)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        -- Ensure default is valid
        if default and not table.find(options, default) then
            default = options[1]
        elseif not default and #options > 0 then
            default = options[1]
        end
        
        local dropdownFrame = Instance.new("Frame")
        dropdownFrame.Name = "Dropdown_" .. text
        dropdownFrame.Size = UDim2.new(1, 0, 0, 45)
        dropdownFrame.BackgroundColor3 = settings.theme.foreground
        dropdownFrame.BackgroundTransparency = 0.3
        dropdownFrame.BorderSizePixel = 0
        dropdownFrame.ZIndex = 4
        dropdownFrame.Parent = tab.page
        
        local dropdownCorner = Instance.new("UICorner")
        dropdownCorner.CornerRadius = UDim.new(0, 12)
        dropdownCorner.Parent = dropdownFrame
        
        -- Add subtle border
        createStroke(dropdownFrame, settings.theme.border, 1, 0.5)
        
        local dropdownLabel = Instance.new("TextLabel")
        dropdownLabel.Size = UDim2.new(0.4, 0, 1, 0)
        dropdownLabel.Position = UDim2.new(0, 15, 0, 0)
        dropdownLabel.BackgroundTransparency = 1
        dropdownLabel.Text = text
        dropdownLabel.TextColor3 = settings.theme.text
        dropdownLabel.TextSize = 15
        dropdownLabel.Font = Enum.Font.GothamSemibold
        dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
        dropdownLabel.ZIndex = 5
        dropdownLabel.Parent = dropdownFrame
        
        local dropdownButton = Instance.new("TextButton")
        dropdownButton.Size = UDim2.new(0.6, -30, 0, 32)
        dropdownButton.Position = UDim2.new(0.4, 15, 0.5, -16)
        dropdownButton.BackgroundColor3 = settings.theme.background
        dropdownButton.BorderSizePixel = 0
        dropdownButton.Text = default or "Select..."
        dropdownButton.TextColor3 = settings.theme.text
        dropdownButton.TextSize = 14
        dropdownButton.Font = Enum.Font.Gotham
        dropdownButton.ZIndex = 5
        dropdownButton.Parent = dropdownFrame
        
        local dropdownButtonCorner = Instance.new("UICorner")
        dropdownButtonCorner.CornerRadius = UDim.new(0, 8)
        dropdownButtonCorner.Parent = dropdownButton
        
        -- Add arrow icon
        local arrowIcon = Instance.new("ImageLabel")
        arrowIcon.Size = UDim2.new(0, 20, 0, 20)
        arrowIcon.Position = UDim2.new(1, -25, 0.5, -10)
        arrowIcon.BackgroundTransparency = 1
        arrowIcon.Image = "rbxassetid://7734053495"
        arrowIcon.ImageColor3 = settings.theme.subtext
        arrowIcon.ZIndex = 6
        arrowIcon.Parent = dropdownButton
        
        -- Create dropdown list directly in ScreenGui to avoid being clipped - WITH SHADOW
        local dropdownList = Instance.new("Frame")
        dropdownList.Name = "DropdownList_" .. text
        dropdownList.Size = UDim2.new(0.6, -30, 0, 0)
        dropdownList.BackgroundColor3 = settings.theme.background
        dropdownList.BackgroundTransparency = 0.05
        dropdownList.BorderSizePixel = 0
        dropdownList.Visible = false
        dropdownList.ZIndex = 100
        dropdownList.ClipsDescendants = true
        dropdownList.Parent = screenGui
        
        local dropdownListCorner = Instance.new("UICorner")
        dropdownListCorner.CornerRadius = UDim.new(0, 12)
        dropdownListCorner.Parent = dropdownList
        
        -- Add modern shadow to dropdown list
        if settings.modernShadows then
            createModernShadow(dropdownList, 0.3, 8, 15)
        end
        
        -- Add border to dropdown list
        createStroke(dropdownList, settings.theme.border, 1, 0.3)
        
        -- Add scroll frame for options
        local optionsFrame = Instance.new("ScrollingFrame")
        optionsFrame.Size = UDim2.new(1, 0, 1, 0)
        optionsFrame.BackgroundTransparency = 1
        optionsFrame.BorderSizePixel = 0
        optionsFrame.ScrollBarThickness = 5
        optionsFrame.ScrollBarImageColor3 = settings.theme.accent
        optionsFrame.ZIndex = 101
        optionsFrame.Parent = dropdownList
        
        -- Add layout for options
        local optionsLayout = Instance.new("UIListLayout")
        optionsLayout.Padding = UDim.new(0, 6)
        optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
        optionsLayout.Parent = optionsFrame
        
        -- Add padding for options
        local optionsPadding = Instance.new("UIPadding")
        optionsPadding.PaddingTop = UDim.new(0, 8)
        optionsPadding.PaddingBottom = UDim.new(0, 8)
        optionsPadding.PaddingLeft = UDim.new(0, 8)
        optionsPadding.PaddingRight = UDim.new(0, 8)
        optionsPadding.Parent = optionsFrame
        
        local selectedOption = default or (options[1] or "")
        local isOpen = false
        
        -- Function to create option buttons
        local function createOptions()
            -- Clear existing options
            for _, child in pairs(optionsFrame:GetChildren()) do
                if child:IsA("TextButton") then
                    child:Destroy()
                end
            end
            
            -- Create option buttons
            for i, option in ipairs(options) do
                local optionButton = Instance.new("TextButton")
                optionButton.Size = UDim2.new(1, -16, 0, 36)
                optionButton.BackgroundColor3 = settings.theme.foreground
                optionButton.BackgroundTransparency = option == selectedOption and 0.2 or 0.6
                optionButton.Text = option
                optionButton.TextColor3 = settings.theme.text
                optionButton.TextSize = 14
                optionButton.Font = Enum.Font.Gotham
                optionButton.ZIndex = 102
                optionButton.LayoutOrder = i
                optionButton.Parent = optionsFrame
                
                local optionCorner = Instance.new("UICorner")
                optionCorner.CornerRadius = UDim.new(0, 8)
                optionCorner.Parent = optionButton
                
                -- Add checkmark for selected option
                if option == selectedOption then
                    local checkmark = Instance.new("ImageLabel")
                    checkmark.Size = UDim2.new(0, 18, 0, 18)
                    checkmark.Position = UDim2.new(1, -22, 0.5, -9)
                    checkmark.BackgroundTransparency = 1
                    checkmark.Image = "rbxassetid://7733715400"
                    checkmark.ImageColor3 = settings.theme.accent
                    checkmark.ZIndex = 103
                    checkmark.Parent = optionButton
                end
                
                -- Highlight on hover
                optionButton.MouseEnter:Connect(function()
                    if option ~= selectedOption then
                        TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundTransparency = 0.4}):Play()
                    end
                end)
                
                optionButton.MouseLeave:Connect(function()
                    if option ~= selectedOption then
                        TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundTransparency = 0.6}):Play()
                    end
                end)
                
                optionButton.MouseButton1Click:Connect(function()
                    -- Update selected option
                    if selectedOption ~= option then
                        -- Reset previous selected option
                        for _, child in pairs(optionsFrame:GetChildren()) do
                            if child:IsA("TextButton") and child.Text == selectedOption then
                                TweenService:Create(child, TweenInfo.new(0.1), {BackgroundTransparency = 0.6}):Play()
                                
                                -- Remove checkmark
                                for _, subChild in pairs(child:GetChildren()) do
                                    if subChild:IsA("ImageLabel") then
                                        subChild:Destroy()
                                    end
                                end
                                break
                            end
                        end
                        
                        selectedOption = option
                        dropdownButton.Text = option
                        TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundTransparency = 0.2}):Play()
                        
                        -- Add checkmark
                        local checkmark = Instance.new("ImageLabel")
                        checkmark.Size = UDim2.new(0, 18, 0, 18)
                        checkmark.Position = UDim2.new(1, -22, 0.5, -9)
                        checkmark.BackgroundTransparency = 1
                        checkmark.Image = "rbxassetid://7733715400"
                        checkmark.ImageColor3 = settings.theme.accent
                        checkmark.ZIndex = 103
                        checkmark.Parent = optionButton
                        
                        -- Call callback
                        if callback then
                            callback(option)
                        end
                    end
                    
                    -- Close dropdown
                    isOpen = false
                    
                    -- Animate closing
                    if settings.animations then
                        local closeTween = TweenService:Create(
                            dropdownList, 
                            TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.In), 
                            {Size = UDim2.new(dropdownList.Size.X.Scale, dropdownList.Size.X.Offset, 0, 0)}
                        )
                        closeTween:Play()
                        
                        -- Rotate arrow back
                        TweenService:Create(
                            arrowIcon, 
                            TweenInfo.new(0.2), 
                            {Rotation = 0}
                        ):Play()
                        
                        closeTween.Completed:Connect(function()
                            dropdownList.Visible = false
                        end)
                    else
                        dropdownList.Visible = false
                        arrowIcon.Rotation = 0
                    end
                end)
            end
            
            -- Update options frame canvas size
            optionsFrame.CanvasSize = UDim2.new(0, 0, 0, #options * 42)
        end
        
        -- Initial creation of options
        createOptions()
        
        -- Update dropdown list position and size when button is clicked
        dropdownButton.MouseButton1Click:Connect(function()
            isOpen = not isOpen
            
            if isOpen then
                -- Calculate absolute position for dropdown list
                local buttonAbsolutePosition = dropdownButton.AbsolutePosition
                local buttonAbsoluteSize = dropdownButton.AbsoluteSize
                
                -- Position the dropdown list below the button
                dropdownList.Position = UDim2.new(
                    0, buttonAbsolutePosition.X,
                    0, buttonAbsolutePosition.Y + buttonAbsoluteSize.Y + 8
                )
                
                -- Match width with the button
                dropdownList.Size = UDim2.new(
                    0, buttonAbsoluteSize.X,
                    0, 0
                )
                
                -- Calculate height based on number of options (max 220 pixels)
                local listHeight = math.min(#options * 42, 220)
                
                -- Make visible before animating
                dropdownList.Visible = true
                
                -- Update options frame canvas size
                optionsFrame.CanvasSize = UDim2.new(0, 0, 0, #options * 42)
                
                -- Animate opening
                if settings.animations then
                    TweenService:Create(
                        dropdownList, 
                        TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), 
                        {Size = UDim2.new(0, buttonAbsoluteSize.X, 0, listHeight)}
                    ):Play()
                    
                    -- Rotate arrow
                    TweenService:Create(
                        arrowIcon, 
                        TweenInfo.new(0.2), 
                        {Rotation = 180}
                    ):Play()
                else
                    dropdownList.Size = UDim2.new(0, buttonAbsoluteSize.X, 0, listHeight)
                    arrowIcon.Rotation = 180
                end
            else
                -- Animate closing
                if settings.animations then
                    local closeTween = TweenService:Create(
                        dropdownList, 
                        TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.In), 
                        {Size = UDim2.new(dropdownList.Size.X.Scale, dropdownList.Size.X.Offset, 0, 0)}
                    )
                    closeTween:Play()
                    
                    -- Rotate arrow back
                    TweenService:Create(
                        arrowIcon, 
                        TweenInfo.new(0.2), 
                        {Rotation = 0}
                    ):Play()
                    
                    closeTween.Completed:Connect(function()
                        dropdownList.Visible = false
                    end)
                else
                    dropdownList.Visible = false
                    arrowIcon.Rotation = 0
                end
            end
        end)
        
        -- Add hover effect
        dropdownFrame.MouseEnter:Connect(function()
            if settings.animations then
                TweenService:Create(dropdownFrame, TweenInfo.new(0.2), {BackgroundTransparency = 0.2}):Play()
            else
                dropdownFrame.BackgroundTransparency = 0.2
            end
        end)
        
        dropdownFrame.MouseLeave:Connect(function()
            if settings.animations then
                TweenService:Create(dropdownFrame, TweenInfo.new(0.2), {BackgroundTransparency = 0.3}):Play()
            else
                dropdownFrame.BackgroundTransparency = 0.3
            end
        end)
        
        -- Close dropdown when clicking elsewhere
        UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                if isOpen then
                    local position = input.Position
                    local dropdownListAbsolutePosition = dropdownList.AbsolutePosition
                    local dropdownListAbsoluteSize = dropdownList.AbsoluteSize
                    
                    -- Check if click is outside the dropdown list and button
                    if position.X < dropdownListAbsolutePosition.X or
                       position.X > dropdownListAbsolutePosition.X + dropdownListAbsoluteSize.X or
                       position.Y < dropdownListAbsolutePosition.Y or
                       position.Y > dropdownListAbsolutePosition.Y + dropdownListAbsoluteSize.Y then
                        
                        -- Also check if click is not on the dropdown button
                        local buttonAbsolutePosition = dropdownButton.AbsolutePosition
                        local buttonAbsoluteSize = dropdownButton.AbsoluteSize
                        
                        if position.X < buttonAbsolutePosition.X or
                           position.X > buttonAbsolutePosition.X + buttonAbsoluteSize.X or
                           position.Y < buttonAbsolutePosition.Y or
                           position.Y > buttonAbsolutePosition.Y + buttonAbsoluteSize.Y then
                            
                            -- Close dropdown
                            isOpen = false
                            
                            -- Animate closing
                            if settings.animations then
                                local closeTween = TweenService:Create(
                                    dropdownList, 
                                    TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.In), 
                                    {Size = UDim2.new(dropdownList.Size.X.Scale, dropdownList.Size.X.Offset, 0, 0)}
                                )
                                closeTween:Play()
                                
                                -- Rotate arrow back
                                TweenService:Create(
                                    arrowIcon, 
                                    TweenInfo.new(0.2), 
                                    {Rotation = 0}
                                ):Play()
                                
                                closeTween.Completed:Connect(function()
                                    dropdownList.Visible = false
                                end)
                            else
                                dropdownList.Visible = false
                                arrowIcon.Rotation = 0
                            end
                        end
                    end
                end
            end
        end)
        
        -- Auto-update functionality
        local updateConnection
        if autoUpdate and typeof(autoUpdate) == "function" then
            updateConnection = RunService.Heartbeat:Connect(function()
                local newOptions = autoUpdate()
                if newOptions and typeof(newOptions) == "table" and #newOptions > 0 then
                    -- Check if options have changed
                    local changed = false
                    if #newOptions ~= #options then
                        changed = true
                    else
                        for i, option in ipairs(newOptions) do
                            if options[i] ~= option then
                                changed = true
                                break
                            end
                        end
                    end
                    
                    if changed then
                        options = newOptions
                        
                        -- Ensure selected option is still valid
                        if not table.find(options, selectedOption) and #options > 0 then
                            selectedOption = options[1]
                            dropdownButton.Text = selectedOption
                            
                            -- Call callback with new selection
                            if callback then
                                callback(selectedOption)
                            end
                        end
                        
                        -- Recreate options if dropdown is open
                        if isOpen then
                            createOptions()
                        end
                    end
                end
            end)
        end
        
        local dropdown = {
            instance = dropdownFrame,
            value = function() return selectedOption end,
            set = function(option)
                if table.find(options, option) and selectedOption ~= option then
                    -- Reset previous selected option
                    for _, child in pairs(optionsFrame:GetChildren()) do
                        if child:IsA("TextButton") and child.Text == selectedOption then
                            child.BackgroundTransparency = 0.6
                            
                            -- Remove checkmark
                            for _, subChild in pairs(child:GetChildren()) do
                                if subChild:IsA("ImageLabel") then
                                    subChild:Destroy()
                                end
                            end
                            break
                        end
                    end
                    
                    -- Update selected option
                    selectedOption = option
                    dropdownButton.Text = option
                    
                    -- Update option button appearance
                    for _, child in pairs(optionsFrame:GetChildren()) do
                        if child:IsA("TextButton") and child.Text == option then
                            child.BackgroundTransparency = 0.2
                            
                            -- Add checkmark
                            local checkmark = Instance.new("ImageLabel")
                            checkmark.Size = UDim2.new(0, 18, 0, 18)
                            checkmark.Position = UDim2.new(1, -22, 0.5, -9)
                            checkmark.BackgroundTransparency = 1
                            checkmark.Image = "rbxassetid://7733715400"
                            checkmark.ImageColor3 = settings.theme.accent
                            checkmark.ZIndex = 103
                            checkmark.Parent = child
                            break
                        end
                    end
                    
                    -- Call callback
                    if callback then
                        callback(option)
                    end
                end
            end,
            setOptions = function(newOptions, newDefault)
                -- Clear existing options
                options = newOptions
                
                -- Set default if provided, otherwise use first option
                if newDefault and table.find(newOptions, newDefault) then
                    selectedOption = newDefault
                elseif #newOptions > 0 then
                    selectedOption = newOptions[1]
                else
                    selectedOption = ""
                end
                
                dropdownButton.Text = selectedOption
                
                -- Recreate options
                createOptions()
                
                -- Call callback with new selection
                if callback then
                    callback(selectedOption)
                end
            end,
            refresh = function()
                createOptions()
            end,
            destroy = function()
                if updateConnection then
                    updateConnection:Disconnect()
                end
            end
        }
        
        return dropdown
    end
    
function UI:AddButton(tabIndex, text, callback)
    local tab = self.tabs[tabIndex]
    if not tab then return nil end
    
    local buttonFrame = Instance.new("TextButton")
    buttonFrame.Name = "Button_" .. text
    buttonFrame.Size = UDim2.new(1, 0, 0, 45)
    buttonFrame.BackgroundColor3 = settings.theme.accent
    buttonFrame.BackgroundTransparency = 0.1
    buttonFrame.BorderSizePixel = 0
    buttonFrame.Text = text
    buttonFrame.TextColor3 = settings.theme.text
    buttonFrame.TextSize = 15
    buttonFrame.Font = Enum.Font.GothamBold
    buttonFrame.ZIndex = 4
    buttonFrame.Parent = tab.page
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 12)
    buttonCorner.Parent = buttonFrame
    
    -- Remove gradient - use solid color instead
    -- Add subtle border for better appearance
    createStroke(buttonFrame, settings.theme.border, 1, 0.3)
    
    local isPressed = false
    local originalSize = UDim2.new(1, 0, 0, 45)
    local originalPosition = UDim2.new(0, 0, 0, 0)
    
    -- Add hover and click effects (improved)
    buttonFrame.MouseEnter:Connect(function()
        if not isPressed then
            if settings.animations then
                TweenService:Create(buttonFrame, TweenInfo.new(0.2), {
                    BackgroundTransparency = 0,
                    BackgroundColor3 = Color3.fromRGB(
                        math.min(255, settings.theme.accent.R * 255 * 1.1),
                        math.min(255, settings.theme.accent.G * 255 * 1.1),
                        math.min(255, settings.theme.accent.B * 255 * 1.1)
                    )
                }):Play()
            else
                buttonFrame.BackgroundTransparency = 0
            end
        end
    end)
    
    buttonFrame.MouseLeave:Connect(function()
        if not isPressed then
            if settings.animations then
                TweenService:Create(buttonFrame, TweenInfo.new(0.2), {
                    BackgroundTransparency = 0.1,
                    BackgroundColor3 = settings.theme.accent,
                    Size = originalSize,
                    Position = originalPosition
                }):Play()
            else
                buttonFrame.BackgroundTransparency = 0.1
                buttonFrame.BackgroundColor3 = settings.theme.accent
                buttonFrame.Size = originalSize
                buttonFrame.Position = originalPosition
            end
        end
    end)
    
    buttonFrame.MouseButton1Down:Connect(function()
        isPressed = true
        if settings.animations then
            TweenService:Create(buttonFrame, TweenInfo.new(0.1), {
                Size = UDim2.new(0.98, 0, 0, 43),
                Position = UDim2.new(0.01, 0, 0, 1),
                BackgroundColor3 = Color3.fromRGB(
                    settings.theme.accent.R * 255 * 0.9,
                    settings.theme.accent.G * 255 * 0.9,
                    settings.theme.accent.B * 255 * 0.9
                ),
                BackgroundTransparency = 0
            }):Play()
        else
            buttonFrame.Size = UDim2.new(0.98, 0, 0, 43)
            buttonFrame.Position = UDim2.new(0.01, 0, 0, 1)
            buttonFrame.BackgroundTransparency = 0
        end
    end)
    
    buttonFrame.MouseButton1Up:Connect(function()
        isPressed = false
        if settings.animations then
            TweenService:Create(buttonFrame, TweenInfo.new(0.1), {
                Size = originalSize,
                Position = originalPosition,
                BackgroundColor3 = settings.theme.accent,
                BackgroundTransparency = 0.1
            }):Play()
        else
            buttonFrame.Size = originalSize
            buttonFrame.Position = originalPosition
            buttonFrame.BackgroundColor3 = settings.theme.accent
            buttonFrame.BackgroundTransparency = 0.1
        end
    end)
    
    -- Ensure button resets when focus is lost
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            if isPressed then
                -- Check if click is outside button
                local mousePos = input.Position
                local buttonPos = buttonFrame.AbsolutePosition
                local buttonSize = buttonFrame.AbsoluteSize
                
                if mousePos.X < buttonPos.X or mousePos.X > buttonPos.X + buttonSize.X or
                   mousePos.Y < buttonPos.Y or mousePos.Y > buttonPos.Y + buttonSize.Y then
                    isPressed = false
                    if settings.animations then
                        TweenService:Create(buttonFrame, TweenInfo.new(0.1), {
                            Size = originalSize,
                            Position = originalPosition,
                            BackgroundColor3 = settings.theme.accent,
                            BackgroundTransparency = 0.1
                        }):Play()
                    else
                        buttonFrame.Size = originalSize
                        buttonFrame.Position = originalPosition
                        buttonFrame.BackgroundColor3 = settings.theme.accent
                        buttonFrame.BackgroundTransparency = 0.1
                    end
                end
            end
        end
    end)
    
    buttonFrame.MouseButton1Click:Connect(function()
        if callback then
            callback()
        end
    end)
    
    local button = {
        instance = buttonFrame,
        setText = function(newText)
            buttonFrame.Text = newText
        end,
        setCallback = function(newCallback)
            callback = newCallback
        end
    }
    
    return button
end
    
-- Notification system (fixed)
function UI:Notify(text, duration, notifType)
    duration = duration or 3
    notifType = notifType or "info"
    
    -- Determine color based on type
    local notifColor
    if notifType == "success" then
        notifColor = settings.theme.success
    elseif notifType == "warning" then
        notifColor = settings.theme.warning
    elseif notifType == "error" then
        notifColor = settings.theme.error
    else
        notifColor = settings.theme.accent
    end
    
    -- Create notification container if it doesn't exist
    local container = screenGui:FindFirstChild("NotificationContainer")
    if not container then
        container = Instance.new("Frame")
        container.Name = "NotificationContainer"
        container.Size = UDim2.new(0, 300, 0, 400) -- Fixed height instead of full screen
        container.Position = UDim2.new(1, -310, 0.5, -200) -- Centered vertically
        container.BackgroundTransparency = 1
        container.ZIndex = 200
        container.ClipsDescendants = true -- Prevent overflow
        container.Parent = screenGui
        
        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 8) -- Reduced padding
        layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        layout.VerticalAlignment = Enum.VerticalAlignment.Bottom
        layout.SortOrder = Enum.SortOrder.LayoutOrder
        layout.Parent = container
        
        local padding = Instance.new("UIPadding")
        padding.PaddingBottom = UDim.new(0, 15)
        padding.PaddingTop = UDim.new(0, 15)
        padding.Parent = container
    end
    
    -- Limit number of notifications (max 5)
    local notifications = {}
    for _, child in pairs(container:GetChildren()) do
        if child.Name == "Notification" then
            table.insert(notifications, child)
        end
    end
    
    -- Remove oldest notifications if too many
    if #notifications >= 5 then
        for i = 1, #notifications - 4 do
            if notifications[i] and notifications[i].Parent then
                notifications[i]:Destroy()
            end
        end
    end
    
    -- Create notification
    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.Size = UDim2.new(1, -10, 0, 0) -- Smaller width
    notification.BackgroundColor3 = settings.theme.background
    notification.BackgroundTransparency = 0.05
    notification.BorderSizePixel = 0
    notification.ClipsDescendants = true
    notification.ZIndex = 201
    notification.Parent = container
    
    local notifCorner = Instance.new("UICorner")
    notifCorner.CornerRadius = UDim.new(0, 8) -- Smaller corner radius
    notifCorner.Parent = notification
    
    -- NO SHADOW for notifications to prevent overlap issues
    
    -- Add border
    createStroke(notification, notifColor, 1, 0.5)
    
    -- Add colored accent bar
    local accentBar = Instance.new("Frame")
    accentBar.Name = "AccentBar"
    accentBar.Size = UDim2.new(0, 3, 1, 0) -- Thinner accent bar
    accentBar.BackgroundColor3 = notifColor
    accentBar.BorderSizePixel = 0
    accentBar.ZIndex = 202
    accentBar.Parent = notification
    
    local accentBarCorner = Instance.new("UICorner")
    accentBarCorner.CornerRadius = UDim.new(0, 1.5)
    accentBarCorner.Parent = accentBar
    
    -- Add notification text
    local notifText = Instance.new("TextLabel")
    notifText.Size = UDim2.new(1, -40, 1, 0)
    notifText.Position = UDim2.new(0, 12, 0, 0)
    notifText.BackgroundTransparency = 1
    notifText.Text = text
    notifText.TextColor3 = settings.theme.text
    notifText.TextSize = 13 -- Smaller text
    notifText.Font = Enum.Font.Gotham
    notifText.TextWrapped = true
    notifText.TextXAlignment = Enum.TextXAlignment.Left
    notifText.TextYAlignment = Enum.TextYAlignment.Center
    notifText.ZIndex = 202
    notifText.Parent = notification
    
    -- Add close button
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 20, 0, 20)
    closeButton.Position = UDim2.new(1, -25, 0, 5)
    closeButton.BackgroundTransparency = 1
    closeButton.Text = "✕"
    closeButton.TextColor3 = settings.theme.subtext
    closeButton.TextSize = 12
    closeButton.Font = Enum.Font.GothamBold
    closeButton.ZIndex = 202
    closeButton.Parent = notification
    
    -- Add progress bar
    local progressBar = Instance.new("Frame")
    progressBar.Name = "ProgressBar"
    progressBar.Size = UDim2.new(1, 0, 0, 2)
    progressBar.Position = UDim2.new(0, 0, 1, -2)
    progressBar.BackgroundColor3 = notifColor
    progressBar.BorderSizePixel = 0
    progressBar.ZIndex = 202
    progressBar.Parent = notification
    
    -- Calculate height based on text (smaller)
    local height = 45 -- Fixed smaller height
    
    -- Animate in
    if settings.animations then
        notification.Size = UDim2.new(1, -10, 0, 0)
        TweenService:Create(
            notification,
            TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
            {Size = UDim2.new(1, -10, 0, height)}
        ):Play()
    else
        notification.Size = UDim2.new(1, -10, 0, height)
    end
    
    -- Animate progress bar
    if settings.animations then
        TweenService:Create(
            progressBar,
            TweenInfo.new(duration, Enum.EasingStyle.Linear),
            {Size = UDim2.new(0, 0, 0, 2)}
        ):Play()
    end
    
    -- Function to properly destroy notification
    local function destroyNotification()
        if notification and notification.Parent then
            if settings.animations then
                local closeTween = TweenService:Create(
                    notification,
                    TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.In),
                    {Size = UDim2.new(1, -10, 0, 0), BackgroundTransparency = 1}
                )
                closeTween:Play()
                
                closeTween.Completed:Connect(function()
                    if notification and notification.Parent then
                        notification:Destroy()
                    end
                    
                    -- Clean up container if no notifications left
                    task.wait(0.1)
                    if container and container.Parent then
                        local hasNotifications = false
                        for _, child in pairs(container:GetChildren()) do
                            if child.Name == "Notification" then
                                hasNotifications = true
                                break
                            end
                        end
                        
                        if not hasNotifications then
                            container:Destroy()
                        end
                    end
                end)
            else
                notification:Destroy()
                
                -- Clean up container if no notifications left
                task.wait(0.1)
                if container and container.Parent then
                    local hasNotifications = false
                    for _, child in pairs(container:GetChildren()) do
                        if child.Name == "Notification" then
                            hasNotifications = true
                            break
                        end
                    end
                    
                    if not hasNotifications then
                        container:Destroy()
                    end
                end
            end
        end
    end
    
    -- Close button functionality
    closeButton.MouseButton1Click:Connect(destroyNotification)
    
    -- Auto close after duration
    task.delay(duration, destroyNotification)
    
    return notification
end
    
-- Destroy UI (improved with shadow cleanup)
function UI:Destroy()
    -- Clean up all shadows first
    local function cleanupShadows(parent)
        for _, child in pairs(parent:GetChildren()) do
            if child.Name == "ShadowContainer" or child.Name == "ModernShadow" then
                child:Destroy()
            elseif child:IsA("GuiObject") then
                cleanupShadows(child)
            end
        end
    end
    
    cleanupShadows(screenGui)
    
    -- Animate closing
    if settings.animations then
        local closeTween = TweenService:Create(
            mainFrame, 
            TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.In), 
            {
                Size = UDim2.new(0, 0, 0, 0),
                Position = UDim2.new(0.5, 0, 0.5, 0),
                BackgroundTransparency = 1
            }
        )
        closeTween:Play()
        
        closeTween.Completed:Connect(function()
            screenGui:Destroy()
            
            -- Remove from UIs table
            for i, ui in ipairs(UIs) do
                if ui == self then
                    table.remove(UIs, i)
                    break
                end
            end
        end)
    else
        screenGui:Destroy()
        
        -- Remove from UIs table
        for i, ui in ipairs(UIs) do
            if ui == self then
                table.remove(UIs, i)
                break
            end
        end
    end
end
    
    -- Add UI to UIs table
    table.insert(UIs, UI)
    
    -- Notify that the UI has loaded
    UI:Notify(settings.title .. " Loaded Successfully", 4, "success")
    
    return UI
end

return VTripLibrary
