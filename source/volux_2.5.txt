--[[
    VTriP UI Library
    Created by VTriP Official
    
    A customizable UI library for Roblox exploits
    Mobile & PC Compatible
    
    Version 2.0 - Professional Edition
]]

local VTripLibrary = {}
local UIs = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")
local LocalPlayer = Players.LocalPlayer
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Default settings
local defaultSettings = {
    title = "VTriP Menu",
    subtitle = "Professional Edition",
    theme = {
        background = Color3.fromRGB(25, 25, 35),
        foreground = Color3.fromRGB(35, 35, 45),
        accent = Color3.fromRGB(130, 100, 200),
        text = Color3.fromRGB(255, 255, 255),
        subtext = Color3.fromRGB(180, 180, 180),
        success = Color3.fromRGB(100, 200, 100),
        warning = Color3.fromRGB(230, 180, 80),
        error = Color3.fromRGB(200, 80, 80)
    },
    size = UDim2.new(0, 450, 0, 380),
    position = UDim2.new(0.5, -225, 0.5, -190),
    toggleKey = Enum.KeyCode.M,
    blur = true,
    roundness = 10,
    animations = true
}

-- Predefined icons for tabs
local Icons = {
    -- Combat icons
    Combat = "rbxassetid://7733674079",
    Aimbot = "rbxassetid://7733924046",
    Weapon = "rbxassetid://7734056608",
    
    -- ESP icons
    ESP = "rbxassetid://7733772937",
    Visuals = "rbxassetid://7733956739",
    Radar = "rbxassetid://7734030307",
    
    -- Player icons
    Player = "rbxassetid://7733799307",
    Character = "rbxassetid://7733799307",
    Movement = "rbxassetid://7733994083",
    
    -- World icons
    World = "rbxassetid://7733858974",
    Environment = "rbxassetid://7733858974",
    
    -- Misc icons
    Misc = "rbxassetid://7733880830",
    Settings = "rbxassetid://7733717890",
    Config = "rbxassetid://7733746798",
    
    -- Default icon
    Default = "rbxassetid://7734110588"
}

-- Utility functions
local function lerp(a, b, t)
    return a + (b - a) * t
end

local function createStroke(parent, color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color
    stroke.Thickness = thickness or 1
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Parent = parent
    return stroke
end

local function createShadow(parent, size, transparency)
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadow.Size = UDim2.new(1, size or 30, 1, size or 30)
    shadow.ZIndex = parent.ZIndex - 1
    shadow.Image = "rbxassetid://6014261993"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = transparency or 0.5
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(49, 49, 450, 450)
    shadow.Parent = parent
    return shadow
end

local function createBlur(parent)
    local blur = Instance.new("BlurEffect")
    blur.Size = 0
    blur.Parent = game:GetService("Lighting")
    
    -- Animate blur in
    TweenService:Create(blur, TweenInfo.new(0.5), {Size = 10}):Play()
    
    -- Store blur in parent for later removal
    parent:SetAttribute("BlurEffect", blur:GetDebugId())
    
    return blur
end

local function removeBlur(parent)
    local blurId = parent:GetAttribute("BlurEffect")
    if blurId then
        for _, effect in pairs(game:GetService("Lighting"):GetChildren()) do
            if effect:IsA("BlurEffect") and effect:GetDebugId() == blurId then
                -- Animate blur out
                local tween = TweenService:Create(effect, TweenInfo.new(0.5), {Size = 0})
                tween:Play()
                tween.Completed:Connect(function()
                    effect:Destroy()
                end)
                break
            end
        end
        parent:SetAttribute("BlurEffect", nil)
    end
end

-- Create a new UI
function VTripLibrary.new(settings)
    settings = settings or {}
    
    -- Merge with default settings
    for key, value in pairs(defaultSettings) do
        if settings[key] == nil then
            settings[key] = value
        elseif key == "theme" and type(settings[key]) == "table" then
            for themeKey, themeValue in pairs(defaultSettings[key]) do
                if settings[key][themeKey] == nil then
                    settings[key][themeKey] = themeValue
                end
            end
        end
    end
    
    -- Create UI instance
    local UI = {}
    UI.settings = settings
    UI.tabs = {}
    UI.selectedTab = 1
    UI.elements = {}
    
    -- Create the main GUI
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VTripMenu_" .. #UIs + 1
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Try to use CoreGui for better protection
    pcall(function()
        screenGui.Parent = game:GetService("CoreGui")
    end)
    
    -- Fallback to PlayerGui if CoreGui fails
    if not screenGui.Parent then
        screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    end
    
    UI.screenGui = screenGui
    
    -- Create open button (initially hidden)
    local openButton = Instance.new("TextButton")
    openButton.Name = "OpenButton"
    openButton.Size = UDim2.new(0, 120, 0, 40)
    openButton.Position = UDim2.new(0.5, -60, 0, 10)
    openButton.BackgroundColor3 = settings.theme.accent
    openButton.BackgroundTransparency = 0.1
    openButton.Text = "Open Menu"
    openButton.TextColor3 = settings.theme.text
    openButton.TextSize = 16
    openButton.Font = Enum.Font.GothamBold
    openButton.Visible = false
    openButton.Parent = screenGui
    UI.openButton = openButton
    
    local openButtonCorner = Instance.new("UICorner")
    openButtonCorner.CornerRadius = UDim.new(0, settings.roundness)
    openButtonCorner.Parent = openButton
    
    createShadow(openButton, 20, 0.6)
    
    -- Main frame settings
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = settings.size
    mainFrame.Position = settings.position
    mainFrame.BackgroundColor3 = settings.theme.background
    mainFrame.BackgroundTransparency = 0.05
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    UI.mainFrame = mainFrame
    
    -- Add rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, settings.roundness)
    uiCorner.Parent = mainFrame
    
    -- Add shadow
    createShadow(mainFrame, 40, 0.5)
    
    -- Add blur effect if enabled
    if settings.blur then
        createBlur(screenGui)
    end
    
    -- Create top bar
    local topBar = Instance.new("Frame")
    topBar.Name = "TopBar"
    topBar.Size = UDim2.new(1, 0, 0, 50)
    topBar.BackgroundColor3 = settings.theme.foreground
    topBar.BackgroundTransparency = 0.2
    topBar.BorderSizePixel = 0
    topBar.Parent = mainFrame
    UI.topBar = topBar
    
    local topBarCorner = Instance.new("UICorner")
    topBarCorner.CornerRadius = UDim.new(0, settings.roundness)
    topBarCorner.Parent = topBar
    
    -- Create a frame to hide the rounded corners at the bottom of the top bar
    local topBarBottomCover = Instance.new("Frame")
    topBarBottomCover.Name = "BottomCover"
    topBarBottomCover.Size = UDim2.new(1, 0, 0, settings.roundness)
    topBarBottomCover.Position = UDim2.new(0, 0, 1, -settings.roundness)
    topBarBottomCover.BackgroundColor3 = settings.theme.foreground
    topBarBottomCover.BackgroundTransparency = 0.2
    topBarBottomCover.BorderSizePixel = 0
    topBarBottomCover.ZIndex = topBar.ZIndex
    topBarBottomCover.Parent = topBar
    
    -- Add title (with fixed size and proper text wrapping)
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(0, 200, 0, 25) -- Fixed width to prevent overflow
    titleLabel.Position = UDim2.new(0, 15, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = settings.title
    titleLabel.TextColor3 = settings.theme.text
    titleLabel.TextSize = 16 -- Reduced size
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextYAlignment = Enum.TextYAlignment.Center
    titleLabel.TextWrapped = true -- Enable text wrapping
    titleLabel.ClipsDescendants = true -- Prevent text from overflowing
    titleLabel.Parent = topBar
    UI.titleLabel = titleLabel
    
    -- Add subtitle (with fixed size and proper text wrapping)
    local subtitleLabel = Instance.new("TextLabel")
    subtitleLabel.Name = "SubtitleLabel"
    subtitleLabel.Size = UDim2.new(0, 200, 0, 20) -- Fixed width to prevent overflow
    subtitleLabel.Position = UDim2.new(0, 15, 0, 30)
    subtitleLabel.BackgroundTransparency = 1
    subtitleLabel.Text = settings.subtitle
    subtitleLabel.TextColor3 = settings.theme.subtext
    subtitleLabel.TextSize = 12 -- Reduced size
    subtitleLabel.Font = Enum.Font.Gotham
    subtitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    subtitleLabel.TextYAlignment = Enum.TextYAlignment.Center
    subtitleLabel.TextWrapped = true -- Enable text wrapping
    subtitleLabel.ClipsDescendants = true -- Prevent text from overflowing
    subtitleLabel.Parent = topBar
    UI.subtitleLabel = subtitleLabel
    
    -- Add close button (improved styling)
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -40, 0, 10)
    closeButton.BackgroundColor3 = settings.theme.error
    closeButton.BackgroundTransparency = 0.1 -- Less transparent
    closeButton.Text = "X"
    closeButton.TextColor3 = settings.theme.text
    closeButton.TextSize = 16
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = topBar
    UI.closeButton = closeButton
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 5)
    closeCorner.Parent = closeButton
    
    -- Add minimize button (improved styling)
    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Name = "MinimizeButton"
    minimizeButton.Size = UDim2.new(0, 30, 0, 30)
    minimizeButton.Position = UDim2.new(1, -80, 0, 10)
    minimizeButton.BackgroundColor3 = settings.theme.warning
    minimizeButton.BackgroundTransparency = 0.1 -- Less transparent
    minimizeButton.Text = "-"
    minimizeButton.TextColor3 = settings.theme.text
    minimizeButton.TextSize = 20
    minimizeButton.Font = Enum.Font.GothamBold
    minimizeButton.Parent = topBar
    UI.minimizeButton = minimizeButton
    
    local minimizeCorner = Instance.new("UICorner")
    minimizeCorner.CornerRadius = UDim.new(0, 5)
    minimizeCorner.Parent = minimizeButton
    
    -- Create sidebar for tab icons
    local sideBar = Instance.new("Frame")
    sideBar.Name = "SideBar"
    sideBar.Size = UDim2.new(0, 60, 1, -50)
    sideBar.Position = UDim2.new(0, 0, 0, 50)
    sideBar.BackgroundColor3 = settings.theme.foreground
    sideBar.BackgroundTransparency = 0.2
    sideBar.BorderSizePixel = 0
    sideBar.Parent = mainFrame
    UI.sideBar = sideBar
    
    local sideBarCorner = Instance.new("UICorner")
    sideBarCorner.CornerRadius = UDim.new(0, settings.roundness)
    sideBarCorner.Parent = sideBar
    
    -- Create a frame to hide the rounded corners at the right of the sidebar
    local sideBarRightCover = Instance.new("Frame")
    sideBarRightCover.Name = "RightCover"
    sideBarRightCover.Size = UDim2.new(0, settings.roundness, 1, 0)
    sideBarRightCover.Position = UDim2.new(1, -settings.roundness, 0, 0)
    sideBarRightCover.BackgroundColor3 = settings.theme.foreground
    sideBarRightCover.BackgroundTransparency = 0.2
    sideBarRightCover.BorderSizePixel = 0
    sideBarRightCover.ZIndex = sideBar.ZIndex
    sideBarRightCover.Parent = sideBar
    
    -- Create tab icons container with scrolling
    local tabIconsFrame = Instance.new("ScrollingFrame")
    tabIconsFrame.Name = "TabIconsFrame"
    tabIconsFrame.Size = UDim2.new(1, 0, 1, 0)
    tabIconsFrame.BackgroundTransparency = 1
    tabIconsFrame.BorderSizePixel = 0
    tabIconsFrame.ScrollBarThickness = 2
    tabIconsFrame.ScrollBarImageColor3 = settings.theme.accent
    tabIconsFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    tabIconsFrame.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Left
    tabIconsFrame.Parent = sideBar
    UI.tabIconsFrame = tabIconsFrame
    
    -- Add layout for tab icons
    local tabIconsLayout = Instance.new("UIListLayout")
    tabIconsLayout.Padding = UDim.new(0, 10)
    tabIconsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    tabIconsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabIconsLayout.Parent = tabIconsFrame
    
    -- Add padding for tab icons
    local tabIconsPadding = Instance.new("UIPadding")
    tabIconsPadding.PaddingTop = UDim.new(0, 10)
    tabIconsPadding.PaddingBottom = UDim.new(0, 10)
    tabIconsPadding.Parent = tabIconsFrame
    
    -- Create content frame for tab content
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "ContentFrame"
    contentFrame.Size = UDim2.new(1, -70, 1, -60)
    contentFrame.Position = UDim2.new(0, 65, 0, 55)
    contentFrame.BackgroundTransparency = 1
    contentFrame.BorderSizePixel = 0
    contentFrame.Parent = mainFrame
    UI.contentFrame = contentFrame
    
    -- Add drag functionality
    local isDragging = false
    local dragStart = nil
    local startPos = nil
    
    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X, 
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = false
        end
    end)
    
    -- Close button functionality (hide menu and show open button)
    closeButton.MouseButton1Click:Connect(function()
        if settings.animations then
            -- Animate closing
            local closeTween = TweenService:Create(
                mainFrame, 
                TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In), 
                {
                    Size = UDim2.new(0, 0, 0, 0),
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    BackgroundTransparency = 1
                }
            )
            closeTween:Play()
            
            closeTween.Completed:Connect(function()
                mainFrame.Visible = false
                openButton.Visible = true
                
                -- Reset size and position for next opening
                mainFrame.Size = settings.size
                mainFrame.Position = settings.position
                mainFrame.BackgroundTransparency = 0.05
            end)
        else
            mainFrame.Visible = false
            openButton.Visible = true
        end
    end)
    
    -- Minimize button functionality
    local isMinimized = false
    minimizeButton.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        
        if isMinimized then
            -- Store original size for restoration
            mainFrame:SetAttribute("OriginalSizeY", mainFrame.Size.Y.Offset)
            
            -- Animate minimizing
            TweenService:Create(
                mainFrame, 
                TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), 
                {Size = UDim2.new(0, mainFrame.Size.X.Offset, 0, 50)}
            ):Play()
            
            -- Hide content
            contentFrame.Visible = false
            sideBar.Visible = false
            
            -- Change minimize button text
            minimizeButton.Text = "+"
        else
            -- Restore original size
            local originalSizeY = mainFrame:GetAttribute("OriginalSizeY") or settings.size.Y.Offset
            
            -- Animate maximizing
            TweenService:Create(
                mainFrame, 
                TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), 
                {Size = UDim2.new(0, mainFrame.Size.X.Offset, 0, originalSizeY)}
            ):Play()
            
            -- Show content
            contentFrame.Visible = true
            sideBar.Visible = true
            
            -- Change minimize button text
            minimizeButton.Text = "-"
        end
    end)
    
    -- Open button functionality
    openButton.MouseButton1Click:Connect(function()
        openButton.Visible = false
        
        if settings.animations then
            -- Reset for animation
            mainFrame.Size = UDim2.new(0, 0, 0, 0)
            mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
            mainFrame.BackgroundTransparency = 1
            mainFrame.Visible = true
            
            -- Animate opening
            local openTween = TweenService:Create(
                mainFrame, 
                TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), 
                {
                    Size = settings.size,
                    Position = settings.position,
                    BackgroundTransparency = 0.05
                }
            )
            openTween:Play()
        else
            mainFrame.Visible = true
        end
    end)
    
    -- Toggle menu visibility with a key (for PC users)
    local toggleKey = settings.toggleKey
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == toggleKey then
            if mainFrame.Visible then
                closeButton.MouseButton1Click:Fire()
            else
                openButton.MouseButton1Click:Fire()
            end
        end
    end)
    
    -- Add tab functionality
    function UI:AddTab(name, icon)
        local iconId = icon
        
        -- If icon is a string that matches a predefined icon name, use that
        if type(icon) == "string" and Icons[icon] then
            iconId = Icons[icon]
        -- If no icon provided, try to find one by name or use default
        elseif not icon then
            iconId = Icons[name] or Icons.Default
        end
        
        local tabIndex = #self.tabs + 1
        local tab = {
            name = name,
            icon = iconId,
            elements = {}
        }
        
        -- Create tab icon button
        local tabButton = Instance.new("ImageButton")
        tabButton.Name = "Tab" .. tabIndex
        tabButton.Size = UDim2.new(0, 40, 0, 40)
        tabButton.BackgroundColor3 = settings.theme.background
        tabButton.BackgroundTransparency = 0.5
        tabButton.Image = iconId
        tabButton.ImageColor3 = settings.theme.subtext
        tabButton.ScaleType = Enum.ScaleType.Fit
        tabButton.LayoutOrder = tabIndex
        tabButton.Parent = self.tabIconsFrame
        tab.button = tabButton
        
        -- Add tooltip with tab name
        local tooltip = Instance.new("TextLabel")
        tooltip.Name = "Tooltip"
        tooltip.Size = UDim2.new(0, 0, 0, 30)
        tooltip.BackgroundColor3 = settings.theme.background
        tooltip.BackgroundTransparency = 0.2
        tooltip.Text = name
        tooltip.TextColor3 = settings.theme.text
        tooltip.TextSize = 14
        tooltip.Font = Enum.Font.GothamSemibold
        tooltip.Visible = false
        tooltip.ZIndex = 100
        tooltip.Parent = screenGui
        
        local tooltipCorner = Instance.new("UICorner")
        tooltipCorner.CornerRadius = UDim.new(0, 5)
        tooltipCorner.Parent = tooltip
        
        -- Show tooltip on hover
        tabButton.MouseEnter:Connect(function()
            -- Calculate text width
            local textSize = TextService:GetTextSize(
                name, 
                14, 
                Enum.Font.GothamSemibold, 
                Vector2.new(1000, 30)
            )
            
            tooltip.Size = UDim2.new(0, textSize.X + 20, 0, 30)
            
            -- Position tooltip to the right of the tab button
            local buttonAbsPos = tabButton.AbsolutePosition
            local buttonAbsSize = tabButton.AbsoluteSize
            
            tooltip.Position = UDim2.new(
                0, buttonAbsPos.X + buttonAbsSize.X + 10,
                0, buttonAbsPos.Y + (buttonAbsSize.Y / 2) - 15
            )
            
            tooltip.Visible = true
        end)
        
        tabButton.MouseLeave:Connect(function()
            tooltip.Visible = false
        end)
        
        local tabButtonCorner = Instance.new("UICorner")
        tabButtonCorner.CornerRadius = UDim.new(0, 8)
        tabButtonCorner.Parent = tabButton
        
        -- Add selection indicator
        local selectionIndicator = Instance.new("Frame")
        selectionIndicator.Name = "SelectionIndicator"
        selectionIndicator.Size = UDim2.new(0, 4, 0.7, 0)
        selectionIndicator.Position = UDim2.new(0, -2, 0.15, 0)
        selectionIndicator.BackgroundColor3 = settings.theme.accent
        selectionIndicator.BorderSizePixel = 0
        selectionIndicator.Visible = tabIndex == 1 -- Only visible for first tab by default
        selectionIndicator.Parent = tabButton
        tab.selectionIndicator = selectionIndicator
        
        local indicatorCorner = Instance.new("UICorner")
        indicatorCorner.CornerRadius = UDim.new(0, 2)
        indicatorCorner.Parent = selectionIndicator
        
        -- Create content page for this tab
        local tabPage = Instance.new("ScrollingFrame")
        tabPage.Name = "Page" .. tabIndex
        tabPage.Size = UDim2.new(1, 0, 1, 0)
        tabPage.BackgroundTransparency = 1
        tabPage.BorderSizePixel = 0
        tabPage.ScrollBarThickness = 4
        tabPage.ScrollBarImageColor3 = settings.theme.accent
        tabPage.Visible = tabIndex == 1 -- Only first tab visible by default
        tabPage.Parent = self.contentFrame
        tab.page = tabPage
        
        -- Add padding to the content
        local padding = Instance.new("UIPadding")
        padding.PaddingLeft = UDim.new(0, 10)
        padding.PaddingRight = UDim.new(0, 10)
        padding.PaddingTop = UDim.new(0, 10)
        padding.PaddingBottom = UDim.new(0, 10)
        padding.Parent = tabPage
        
        -- Add layout for content
        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 10)
        layout.SortOrder = Enum.SortOrder.LayoutOrder
        layout.Parent = tabPage
        tab.layout = layout
        
        -- Tab button click handler
        tabButton.MouseButton1Click:Connect(function()
            -- Hide all pages and reset tab button styling
            for _, otherTab in ipairs(self.tabs) do
                otherTab.page.Visible = false
                otherTab.button.ImageColor3 = settings.theme.subtext
                otherTab.button.BackgroundTransparency = 0.5
                otherTab.selectionIndicator.Visible = false
            end
            
            -- Show selected page and update tab button styling
            tabPage.Visible = true
            tabButton.ImageColor3 = settings.theme.accent
            tabButton.BackgroundTransparency = 0.3
            selectionIndicator.Visible = true
            
            self.selectedTab = tabIndex
        end)
        
        -- Auto-size the scrolling frame
        layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabPage.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 20)
        end)
        
        -- Add tab to tabs table
        table.insert(self.tabs, tab)
        
        -- Set as selected if it's the first tab
        if tabIndex == 1 then
            tabButton.ImageColor3 = settings.theme.accent
            tabButton.BackgroundTransparency = 0.3
        end
        
        -- Update tab icons container canvas size
        tabIconsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabIconsFrame.CanvasSize = UDim2.new(0, 0, 0, tabIconsLayout.AbsoluteContentSize.Y + 20)
        end)
        
        return tab
    end
    
    -- Add elements to tabs
    function UI:AddSection(tabIndex, text)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        local sectionFrame = Instance.new("Frame")
        sectionFrame.Name = "Section_" .. text
        sectionFrame.Size = UDim2.new(1, 0, 0, 35)
        sectionFrame.BackgroundTransparency = 1
        sectionFrame.Parent = tab.page
        
        local sectionLabel = Instance.new("TextLabel")
        sectionLabel.Size = UDim2.new(1, 0, 1, 0)
        sectionLabel.BackgroundTransparency = 1
        sectionLabel.Text = text
        sectionLabel.TextColor3 = settings.theme.accent
        sectionLabel.TextSize = 16
        sectionLabel.Font = Enum.Font.GothamBold
        sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
        sectionLabel.Parent = sectionFrame
        
        local sectionLine = Instance.new("Frame")
        sectionLine.Size = UDim2.new(1, 0, 0, 1)
        sectionLine.Position = UDim2.new(0, 0, 1, -1)
        sectionLine.BackgroundColor3 = settings.theme.accent
        sectionLine.BackgroundTransparency = 0.5
        sectionLine.BorderSizePixel = 0
        sectionLine.Parent = sectionFrame
        
        return sectionFrame
    end
    
    function UI:AddToggle(tabIndex, text, default, callback)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        local toggleFrame = Instance.new("Frame")
        toggleFrame.Name = "Toggle_" .. text
        toggleFrame.Size = UDim2.new(1, 0, 0, 40)
        toggleFrame.BackgroundColor3 = settings.theme.foreground
        toggleFrame.BackgroundTransparency = 0.5
        toggleFrame.BorderSizePixel = 0
        toggleFrame.Parent = tab.page
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 6)
        toggleCorner.Parent = toggleFrame
        
        local toggleLabel = Instance.new("TextLabel")
        toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
        toggleLabel.Position = UDim2.new(0, 10, 0, 0)
        toggleLabel.BackgroundTransparency = 1
        toggleLabel.Text = text
        toggleLabel.TextColor3 = settings.theme.text
        toggleLabel.TextSize = 14
        toggleLabel.Font = Enum.Font.Gotham
        toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
        toggleLabel.Parent = toggleFrame
        
        -- Create a clickable button that covers the entire frame
        local clickArea = Instance.new("TextButton")
        clickArea.Name = "ClickArea"
        clickArea.Size = UDim2.new(1, 0, 1, 0)
        clickArea.BackgroundTransparency = 1
        clickArea.Text = ""
        clickArea.ZIndex = 10 -- Above other elements
        clickArea.Parent = toggleFrame
        
        local toggleButton = Instance.new("Frame")
        toggleButton.Name = "ToggleButton"
        toggleButton.Size = UDim2.new(0, 40, 0, 24)
        toggleButton.Position = UDim2.new(0.85, 0, 0.5, -12)
        toggleButton.BackgroundColor3 = default and settings.theme.success or settings.theme.error
        toggleButton.BorderSizePixel = 0
        toggleButton.ZIndex = 5 -- Below click area
        toggleButton.Parent = toggleFrame
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 12)
        toggleCorner.Parent = toggleButton
        
        local toggleCircle = Instance.new("Frame")
        toggleCircle.Size = UDim2.new(0, 18, 0, 18)
        toggleCircle.Position = default and UDim2.new(0.55, 0, 0.5, -9) or UDim2.new(0.05, 0, 0.5, -9)
        toggleCircle.BackgroundColor3 = settings.theme.text
        toggleCircle.BorderSizePixel = 0
        toggleCircle.ZIndex = 6 -- Above toggle button
        toggleCircle.Parent = toggleButton
        
        local toggleCircleCorner = Instance.new("UICorner")
        toggleCircleCorner.CornerRadius = UDim.new(0, 9)
        toggleCircleCorner.Parent = toggleCircle
        
        local toggled = default
        
        -- Update toggle function
        local function updateToggle()
            toggled = not toggled
            
            local targetPosition = toggled and UDim2.new(0.55, 0, 0.5, -9) or UDim2.new(0.05, 0, 0.5, -9)
            local targetColor = toggled and settings.theme.success or settings.theme.error
            
            if settings.animations then
                TweenService:Create(toggleCircle, TweenInfo.new(0.2), {Position = targetPosition}):Play()
                TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = targetColor}):Play()
            else
                toggleCircle.Position = targetPosition
                toggleButton.BackgroundColor3 = targetColor
            end
            
            if callback then
                callback(toggled)
            end
        end
        
        -- Make the whole frame clickable via the click area
        clickArea.MouseButton1Click:Connect(updateToggle)
        
        local toggle = {
            instance = toggleFrame,
            value = function() return toggled end,
            set = function(value)
                if toggled ~= value then
                    toggled = value
                    local targetPosition = toggled and UDim2.new(0.55, 0, 0.5, -9) or UDim2.new(0.05, 0, 0.5, -9)
                    local targetColor = toggled and settings.theme.success or settings.theme.error
                    
                    if settings.animations then
                        TweenService:Create(toggleCircle, TweenInfo.new(0.2), {Position = targetPosition}):Play()
                        TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = targetColor}):Play()
                    else
                        toggleCircle.Position = targetPosition
                        toggleButton.BackgroundColor3 = targetColor
                    end
                    
                    if callback then
                        callback(toggled)
                    end
                end
            end
        }
        
        return toggle
    end
    
    function UI:AddSlider(tabIndex, text, min, max, default, callback)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        -- Ensure default is within range
        default = math.clamp(default or min, min, max)
        
        local sliderFrame = Instance.new("Frame")
        sliderFrame.Name = "Slider_" .. text
        sliderFrame.Size = UDim2.new(1, 0, 0, 60)
        sliderFrame.BackgroundColor3 = settings.theme.foreground
        sliderFrame.BackgroundTransparency = 0.5
        sliderFrame.BorderSizePixel = 0
        sliderFrame.Parent = tab.page
        
        local sliderCorner = Instance.new("UICorner")
        sliderCorner.CornerRadius = UDim.new(0, 6)
        sliderCorner.Parent = sliderFrame
        
        local sliderLabel = Instance.new("TextLabel")
        sliderLabel.Size = UDim2.new(0.6, 0, 0, 20)
        sliderLabel.Position = UDim2.new(0, 10, 0, 5)
        sliderLabel.BackgroundTransparency = 1
        sliderLabel.Text = text
        sliderLabel.TextColor3 = settings.theme.text
        sliderLabel.TextSize = 14
        sliderLabel.Font = Enum.Font.Gotham
        sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
        sliderLabel.Parent = sliderFrame
        
        local valueLabel = Instance.new("TextLabel")
        valueLabel.Size = UDim2.new(0.2, 0, 0, 20)
        valueLabel.Position = UDim2.new(0.8, -10, 0, 5)
        valueLabel.BackgroundTransparency = 1
        valueLabel.Text = tostring(default)
        valueLabel.TextColor3 = settings.theme.text
        valueLabel.TextSize = 14
        valueLabel.Font = Enum.Font.Gotham
        valueLabel.TextXAlignment = Enum.TextXAlignment.Right
        valueLabel.Parent = sliderFrame
        
        local sliderBg = Instance.new("Frame")
        sliderBg.Size = UDim2.new(1, -20, 0, 10)
        sliderBg.Position = UDim2.new(0, 10, 0, 35)
        sliderBg.BackgroundColor3 = settings.theme.background
        sliderBg.BorderSizePixel = 0
        sliderBg.Parent = sliderFrame
        
        local sliderBgCorner = Instance.new("UICorner")
        sliderBgCorner.CornerRadius = UDim.new(0, 5)
        sliderBgCorner.Parent = sliderBg
        
        local sliderFill = Instance.new("Frame")
        sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        sliderFill.BackgroundColor3 = settings.theme.accent
        sliderFill.BorderSizePixel = 0
        sliderFill.Parent = sliderBg
        
        local sliderFillCorner = Instance.new("UICorner")
        sliderFillCorner.CornerRadius = UDim.new(0, 5)
        sliderFillCorner.Parent = sliderFill
        
        local sliderButton = Instance.new("TextButton")
        sliderButton.Size = UDim2.new(0, 20, 0, 20)
        sliderButton.Position = UDim2.new((default - min) / (max - min), -10, 0.5, -10)
        sliderButton.BackgroundColor3 = settings.theme.accent
        sliderButton.BorderSizePixel = 0
        sliderButton.Text = ""
        sliderButton.Parent = sliderBg
        
        local sliderButtonCorner = Instance.new("UICorner")
        sliderButtonCorner.CornerRadius = UDim.new(0, 10)
        sliderButtonCorner.Parent = sliderButton
        
        -- Add shadow to slider button
        createShadow(sliderButton, 10, 0.7)
        
        local value = default
        local dragging = false
        
        local function updateSlider(input)
            local relativePos = math.clamp((input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X, 0, 1)
            local newValue = min + (max - min) * relativePos
            
            -- Round to 1 decimal place if the range is large, otherwise use integers
            if max - min > 10 then
                newValue = math.floor(newValue * 10) / 10
            else
                newValue = math.floor(newValue)
            end
            
            -- Only update if value changed
            if newValue ~= value then
                value = newValue
                
                -- Update UI
                sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
                sliderButton.Position = UDim2.new(relativePos, -10, 0.5, -10)
                valueLabel.Text = tostring(value)
                
                -- Call callback
                if callback then
                    callback(value)
                end
            end
        end
        
        sliderButton.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                
                -- Make button slightly larger when dragging
                if settings.animations then
                    TweenService:Create(sliderButton, TweenInfo.new(0.2), {Size = UDim2.new(0, 24, 0, 24), Position = UDim2.new(sliderButton.Position.X.Scale, -12, 0.5, -12)}):Play()
                else
                    sliderButton.Size = UDim2.new(0, 24, 0, 24)
                    sliderButton.Position = UDim2.new(sliderButton.Position.X.Scale, -12, 0.5, -12)
                end
            end
        end)
        
        sliderBg.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                updateSlider(input)
                dragging = true
                
                -- Make button slightly larger when dragging
                if settings.animations then
                    TweenService:Create(sliderButton, TweenInfo.new(0.2), {Size = UDim2.new(0, 24, 0, 24), Position = UDim2.new(sliderButton.Position.X.Scale, -12, 0.5, -12)}):Play()
                else
                    sliderButton.Size = UDim2.new(0, 24, 0, 24)
                    sliderButton.Position = UDim2.new(sliderButton.Position.X.Scale, -12, 0.5, -12)
                end
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                updateSlider(input)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
                dragging = false
                
                -- Return button to normal size
                if settings.animations then
                    TweenService:Create(sliderButton, TweenInfo.new(0.2), {Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(sliderButton.Position.X.Scale, -10, 0.5, -10)}):Play()
                else
                    sliderButton.Size = UDim2.new(0, 20, 0, 20)
                    sliderButton.Position = UDim2.new(sliderButton.Position.X.Scale, -10, 0.5, -10)
                end
            end
        end)
        
        local slider = {
            instance = sliderFrame,
            value = function() return value end,
            set = function(newValue)
                newValue = math.clamp(newValue, min, max)
                
                -- Only update if value changed
                if value ~= newValue then
                    value = newValue
                    local relativePos = (value - min) / (max - min)
                    
                    -- Update UI
                    sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
                    sliderButton.Position = UDim2.new(relativePos, -10, 0.5, -10)
                    valueLabel.Text = tostring(value)
                    
                    -- Call callback
                    if callback then
                        callback(value)
                    end
                end
            end,
            setRange = function(newMin, newMax)
                min = newMin
                max = newMax
                
                -- Ensure value is within new range
                local newValue = math.clamp(value, min, max)
                if value ~= newValue then
                    value = newValue
                end
                
                -- Update UI
                local relativePos = (value - min) / (max - min)
                sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
                sliderButton.Position = UDim2.new(relativePos, -10, 0.5, -10)
                valueLabel.Text = tostring(value)
            end
        }
        
        return slider
    end
    
    function UI:AddDropdown(tabIndex, text, options, default, callback)
        local tab = self.tabs[tabIndex]
        if not tab then return nil end
        
        -- Ensure default is valid
        if default and not table.find(options, default) then
            default = options[1]
        elseif not default and #options > 0 then
            default = options[1]
        end
        
        local dropdownFrame = Instance.new("Frame")
        dropdownFrame.Name = "Dropdown_" .. text
        dropdownFrame.Size = UDim2.new(1, 0, 0, 40)
        dropdownFrame.BackgroundColor3 = settings.theme.foreground
        dropdownFrame.BackgroundTransparency = 0.5
        dropdownFrame.BorderSizePixel = 0
        dropdownFrame.Parent = tab.page
        
        local dropdownCorner = Instance.new("UICorner")
        dropdownCorner.CornerRadius = UDim.new(0, 6)
        dropdownCorner.Parent = dropdownFrame
        
        local dropdownLabel = Instance.new("TextLabel")
        dropdownLabel.Size = UDim2.new(0.4, 0, 1, 0)
        dropdownLabel.Position = UDim2.new(0, 10, 0, 0)
        dropdownLabel.BackgroundTransparency = 1
        dropdownLabel.Text = text
        dropdownLabel.TextColor3 = settings.theme.text
        dropdownLabel.TextSize = 14
        dropdownLabel.Font = Enum.Font.Gotham
        dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
        dropdownLabel.Parent = dropdownFrame
        
        local dropdownButton = Instance.new("TextButton")
        dropdownButton.Size = UDim2.new(0.6, -20, 0, 30)
        dropdownButton.Position = UDim2.new(0.4, 10, 0.5, -15)
        dropdownButton.BackgroundColor3 = settings.theme.background
        dropdownButton.BackgroundTransparency = 0.1 -- Less transparent
        dropdownButton.BorderSizePixel = 0
        dropdownButton.Text = default or "Select..."
        dropdownButton.TextColor3 = settings.theme.text
        dropdownButton.TextSize = 14
        dropdownButton.Font = Enum.Font.Gotham
        dropdownButton.Parent = dropdownFrame
        
        local dropdownButtonCorner = Instance.new("UICorner")
        dropdownButtonCorner.CornerRadius = UDim.new(0, 5)
        dropdownButtonCorner.Parent = dropdownButton
        
        -- Add arrow icon
        local arrowIcon = Instance.new("ImageLabel")
        arrowIcon.Size = UDim2.new(0, 20, 0, 20)
        arrowIcon.Position = UDim2.new(1, -25, 0.5, -10)
        arrowIcon.BackgroundTransparency = 1
        arrowIcon.Image = "rbxassetid://7734053495" -- Down arrow icon
        arrowIcon.ImageColor3 = settings.theme.subtext
        arrowIcon.Parent = dropdownButton
        
        -- Create dropdown list directly in ScreenGui to avoid being clipped
        local dropdownList = Instance.new("Frame")
        dropdownList.Name = "DropdownList_" .. text
        dropdownList.Size = UDim2.new(0.6, -20, 0, 0) -- Start with 0 height
        dropdownList.BackgroundColor3 = settings.theme.background
        dropdownList.BackgroundTransparency = 0.1 -- Less transparent
        dropdownList.BorderSizePixel = 0
        dropdownList.Visible = false
        dropdownList.ZIndex = 100 -- High ZIndex to appear above everything
        dropdownList.ClipsDescendants = true -- Clip contents during animation
        dropdownList.Parent = screenGui -- Add to ScreenGui instead of dropdownFrame
        
        local dropdownListCorner = Instance.new("UICorner")
        dropdownListCorner.CornerRadius = UDim.new(0, 5)
        dropdownListCorner.Parent = dropdownList
        
        -- Add shadow to dropdown list
        createShadow(dropdownList, 20, 0.7)
        
        -- Add scroll frame for options
        local optionsFrame = Instance.new("ScrollingFrame")
        optionsFrame.Size = UDim2.new(1, 0, 1, 0)
        optionsFrame.BackgroundTransparency = 1
        optionsFrame.BorderSizePixel = 0
        optionsFrame.ScrollBarThickness = 4
        optionsFrame.ScrollBarImageColor3 = settings.theme.accent
        optionsFrame.ZIndex = 101
        optionsFrame.Parent = dropdownList
        
        -- Add layout for options
        local optionsLayout = Instance.new("UIListLayout")
        optionsLayout.Padding = UDim.new(0, 2)
        optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
        optionsLayout.Parent = optionsFrame
        
        -- Add padding for options
        local optionsPadding = Instance.new("UIPadding")
        optionsPadding.PaddingTop = UDim.new(0, 5)
        optionsPadding.PaddingBottom = UDim.new(0, 5)
        optionsPadding.PaddingLeft = UDim.new(0, 5)
        optionsPadding.PaddingRight = UDim.new(0, 5)
        optionsPadding.Parent = optionsFrame
        
        local selectedOption = default or (options[1] or "")
        local isOpen = false
        
        -- Create option buttons
        for i, option in ipairs(options) do
            local optionButton = Instance.new("TextButton")
            optionButton.Size = UDim2.new(1, -10, 0, 30)
            optionButton.BackgroundColor3 = settings.theme.foreground
            optionButton.BackgroundTransparency = option == selectedOption and 0.3 or 0.7
            optionButton.Text = option
            optionButton.TextColor3 = settings.theme.text
            optionButton.TextSize = 14
            optionButton.Font = Enum.Font.Gotham
            optionButton.ZIndex = 102
            optionButton.LayoutOrder = i
            optionButton.Parent = optionsFrame
            
            local optionCorner = Instance.new("UICorner")
            optionCorner.CornerRadius = UDim.new(0, 4)
            optionCorner.Parent = optionButton
            
            -- Highlight on hover
            optionButton.MouseEnter:Connect(function()
                if option ~= selectedOption then
                    TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundTransparency = 0.5}):Play()
                end
            end)
            
            optionButton.MouseLeave:Connect(function()
                if option ~= selectedOption then
                    TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundTransparency = 0.7}):Play()
                end
            end)
            
            optionButton.MouseButton1Click:Connect(function()
                -- Update selected option
                if selectedOption ~= option then
                    -- Reset previous selected option
                    for _, child in pairs(optionsFrame:GetChildren()) do
                        if child:IsA("TextButton") and child.Text == selectedOption then
                            TweenService:Create(child, TweenInfo.new(0.1), {BackgroundTransparency = 0.7}):Play()
                            break
                        end
                    end
                    
                    selectedOption = option
                    dropdownButton.Text = option
                    TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundTransparency = 0.3}):Play()
                    
                    -- Call callback
                    if callback then
                        callback(option)
                    end
                end
                
                -- Close dropdown
                isOpen = false
                
                -- Animate closing
                if settings.animations then
                    local closeTween = TweenService:Create(
                        dropdownList, 
                        TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.In), 
                        {Size = UDim2.new(0.6, -20, 0, 0)}
                    )
                    closeTween:Play()
                    
                    -- Rotate arrow back
                    TweenService:Create(
                        arrowIcon, 
                        TweenInfo.new(0.2), 
                        {Rotation = 0}
                    ):Play()
                    
                    closeTween.Completed:Connect(function()
                        dropdownList.Visible = false
                    end)
                else
                    dropdownList.Visible = false
                    arrowIcon.Rotation = 0
                end
            end)
        end
        
        -- Update dropdown list position and size when button is clicked
        dropdownButton.MouseButton1Click:Connect(function()
            isOpen = not isOpen
            
            if isOpen then
                -- Calculate absolute position for dropdown list
                local buttonAbsolutePosition = dropdownButton.AbsolutePosition
                local buttonAbsoluteSize = dropdownButton.AbsoluteSize
                
                -- Position the dropdown list below the button
                dropdownList.Position = UDim2.new(
                    0, buttonAbsolutePosition.X,
                    0, buttonAbsolutePosition.Y + buttonAbsoluteSize.Y + 5
                )
                
                -- Match width with the button
                dropdownList.Size = UDim2.new(
                    0, buttonAbsoluteSize.X,
                    0, 0 -- Start with 0 height for animation
                )
                
                -- Calculate height based on number of options (max 200 pixels)
                local listHeight = math.min(#options * 37, 200)
                
                -- Make visible before animating
                dropdownList.Visible = true
                
                -- Update options frame canvas size
                optionsFrame.CanvasSize = UDim2.new(0, 0, 0, #options * 37)
                
                -- Animate opening
                if settings.animations then
                    TweenService:Create(
                        dropdownList, 
                        TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), 
                        {Size = UDim2.new(0, buttonAbsoluteSize.X, 0, listHeight)}
                    ):Play()
                    
                    -- Rotate arrow
                    TweenService:Create(
                        arrowIcon, 
                        TweenInfo.new(0.2), 
                        {Rotation = 180}
                    ):Play()
                else
                    dropdownList.Size = UDim2.new(0, buttonAbsoluteSize.X, 0, listHeight)
                    arrowIcon.Rotation = 180
                end
            else
                -- Animate closing
                if settings.animations then
                    local closeTween = TweenService:Create(
                        dropdownList, 
                        TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.In), 
                        {Size = UDim2.new(dropdownList.Size.X.Scale, dropdownList.Size.X.Offset, 0, 0)}
                    )
                    closeTween:Play()
                    
                    -- Rotate arrow back
                    TweenService:Create(
                        arrowIcon, 
                        TweenInfo.new(0.2), 
                        {Rotation = 0}
                    ):Play()
                    
                    closeTween.Completed:Connect(function()
                        dropdownList.Visible = false
                    end)
                else
                    dropdownList.Visible = false
                    arrowIcon.Rotation = 0
                end
            end
        end)
        
        -- Close dropdown when clicking elsewhere
        UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                if isOpen then
                    local position = input.Position
                    local dropdownListAbsolutePosition = dropdownList.AbsolutePosition
                    local dropdownListAbsoluteSize = dropdownList.AbsoluteSize
                    
                    -- Check if click is outside the dropdown list and button
                    if position.X < dropdownListAbsolutePosition.X or
                       position.X > dropdownListAbsolutePosition.X + dropdownListAbsoluteSize.X or
                       position.Y < dropdownListAbsolutePosition.Y or
                       position.Y > dropdownListAbsolutePosition.Y + dropdownListAbsoluteSize.Y then
                        
                        -- Also check if click is not on the dropdown button
                        local buttonAbsolutePosition = dropdownButton.AbsolutePosition
                        local buttonAbsoluteSize = dropdownButton.AbsoluteSize
                        
                        if position.X < buttonAbsolutePosition.X or
                           position.X > buttonAbsolutePosition.X + buttonAbsoluteSize.X or
                           position.Y < buttonAbsolutePosition.Y or
                           position.Y > buttonAbsolutePosition.Y + buttonAbsoluteSize.Y then
                            
                            -- Close dropdown
                            isOpen = false
                            
                            -- Animate closing
                            if settings.animations then
                                local closeTween = TweenService:Create(
                                    dropdownList, 
                                    TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.In), 
                                    {Size = UDim2.new(dropdownList.Size.X.Scale, dropdownList.Size.X.Offset, 0, 0)}
                                )
                                closeTween:Play()
                                
                                -- Rotate arrow back
                                TweenService:Create(
                                    arrowIcon, 
                                    TweenInfo.new(0.2), 
                                    {Rotation = 0}
                                ):Play()
                                
                                closeTween.Completed:Connect(function()
                                    dropdownList.Visible = false
                                end)
                            else
                                dropdownList.Visible = false
                                arrowIcon.Rotation = 0
                            end
                        end
                    end
                end
            end
        end)
        
        local dropdown =